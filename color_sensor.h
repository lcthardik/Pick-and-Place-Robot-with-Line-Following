//#define F_CPU 16000000UL // F_CPU value
//#include <avr/io.h>
//#include <avr/interrupt.h> //to use the interrupts of the controller
//#include <util/delay.h>
//#include <math.h> 
unsigned int red1,blue1,green1; //to take averages of the sensor for more accurate reading
unsigned int pulse=0;
unsigned int red=0,green=0,blue=0;

void rgb_port_config (void)
{
    DDRC |=0xff;
    //PORTC = 0x00;
   //C PORT PC 7,3,1 
  //E port 4,5,3 set as output for rgb color led : for pin 2,3,5 of arduino MEGA 2560
  //LED is ON when LOW is passed and OFF when HIGH is passed 
  
}

void color_sensor_pin_config(void)
{
    DDRH |=0b01111000; //3,4,5,6 {S3,S2,S1,S0}
    // S0 PK2 ,S1 PK3 ,S2 PK4 ,S3 PK5 ALL ARE OUTPUT PINS [ 0 S3 S2 S1 S0 0 0 0] 
    DDRD &=0b11111110;// 21 PIN AS INPUT 

}


void color_sensor_pin_interrupt_init(void)  //Interrupt 0 enable
{
  cli(); //Clears the global interrupt
  EICRA |=0x02;// INT0 is set to trigger with falling edge
  EIMSK |=0x00;// Enable Interrupt INT0 for color sensor
  sei(); // Enables the global interrupt
}


ISR(INT0_vect)
{
 pulse++;
 //Serial.println("Interrupt Called");
//incrementing the pulse value when interrupt is there
}


void init_devices_color_sensor(void) //Initialized all the ports here //to be called in function of main program//######
{
  cli(); //Clears the global interrupt
  rgb_port_config ();
  color_sensor_pin_interrupt_init();
  color_sensor_pin_config();
  sei();   // Enables the global interrupt
}

//Filter Selection [ 0 0 S3 S2 S1 S0 0 0] 

void filter_red(void)    //Used to select red filter
{
   //Filter Select - red filter
   //set S2 low
   //set S3 low

   PORTH &=~(1<<PH4); //IT WILL TURN PIN 4 OFF AT ANY VALUE OF PK 1110 111
   PORTH &=~(1<<PH3);
  
}

void filter_green(void) //Used to select green filter
{
   //Filter Select - green filter
   //set S2 High
   //set S3 High

  PORTH |=(1<<PH4); //IT WILL TURN PIN 4 ON AT ANY VALUE OF PK 0001 0000
  PORTH |=(1<<PH3); //0010 0000
}

void filter_blue(void)  //Used to select blue filter
{
  //Filter Select - blue filter
  //set S2 low
  //set S3 High
  
  PORTH &=~(1<<PH4) ;//IT WILL TURN PIN 4 OFF AT ANY VALUE OF PK 1110 1111
  PORTH |=(1<<PH3) ;//IT WILL TURN PIN 5 HIGH IN ANY CASE 0010 0000
}

void filter_clear(void) //select no filter
{
  //Filter Select - no filter
  //set S2 High
  //set S3 Low
  PORTH |=(1<<PH4) ;//IT WILL TURN PIN 4 ON AT ANY VALUE OF PK 0001 0000
  PORTH &=~(1<<PH3);//1101 1111
}

//This function is used to select the scaled down version of the original frequency of the output generated by the color sensor, generally 20% scaling is preferable, though you can change the values as per your application by referring datasheet
//Color Sensing Scaling
void color_sensor_scaling()   
{
  //Output Scaling 20% from data sheet
  //set S0 high
  //set S1 high
  PORTH |= 0b01100000;//NOT CONSIDERING WHAT OTHER PINS ARE SET THE S0 AND S1 HIGH 
}

void red_read(void) // function to select red filter and display the count generated by the sensor on LCD. The count will be less if the color is red.
  {//Red  
  
  filter_red(); //select red filter
  pulse=0;  //reset the count to 0
  EIMSK |=0x01;
  _delay_ms(100);
  red=pulse;//store the count in variable called red
  EIMSK |=0x00;
}

void green_read(void) // function to select green filter and display the count generated by the sensor on LCD. The count will be less if the color is green.
{  
  //Green
  filter_green();//select green filter
  pulse=0;//reset the count to 0
  EIMSK |=0x01;
 _delay_ms(100);
 green=pulse;//store the count in variable called green
EIMSK |=0x00;
}

void blue_read(void) // function to select blue filter and display the count generated by the sensor on LCD. The count will be less if the color is blue. 
{
  //Blue
  filter_blue(); //select blue filter
  pulse=0;//reset the count to 0
  EIMSK |=0x01;
  _delay_ms(100);
  blue = pulse;  //store the count in variable called blue
  EIMSK |=0x00;
}

int find_color() //main function for the code 
{

//init_devices();
color_sensor_scaling();
//PORTC=0xff; //turn the LED pins HIGH so to make them off

filter_clear();
red_read();
blue_read();
green_read();


//Serial.println(red);
//Serial.println(green);
//Serial.println(blue);
//Serial.println();

//Serial.println();
//taking average of the values

int tr=800,tg=800,tb=800;
//making the specific LED glow as per the lowest reading from the sensor
if(red<tr&&blue<tb&&green<tg)
{
 PORTC = 0b00000000;
}
else if(red>blue&&red>green)
{
  PORTC = 0b10000000;

  return 1;  //red
}
else if(blue>red&&blue>green)
{      PORTC =0b00001000;  // turn the LED on (HIGH is the voltage level)

  return 2; //blue
}
else if(green>red&&green>blue)
{  PORTC = 0b00000010;  // turn the LED on (HIGH is the voltage level)

  return 3;  //green
}
     PORTC =0b00000000;// turn the LED off by making the voltage LOW

}


