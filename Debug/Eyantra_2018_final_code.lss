
Eyantra_2018_final_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000180  00800200  00001776  0000180a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001776  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006ed  00800380  00800380  0000198a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000198a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  000019fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ca5  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f1d  00000000  00000000  00004881  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001316  00000000  00000000  0000579e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b8  00000000  00000000  00006ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dc7  00000000  00000000  00006f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a01  00000000  00000000  00007d33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  00009734  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
       2:	00 00       	nop
       4:	d0 c0       	rjmp	.+416    	; 0x1a6 <__bad_interrupt>
       6:	00 00       	nop
       8:	ce c0       	rjmp	.+412    	; 0x1a6 <__bad_interrupt>
       a:	00 00       	nop
       c:	cc c0       	rjmp	.+408    	; 0x1a6 <__bad_interrupt>
       e:	00 00       	nop
      10:	ca c0       	rjmp	.+404    	; 0x1a6 <__bad_interrupt>
      12:	00 00       	nop
      14:	c8 c0       	rjmp	.+400    	; 0x1a6 <__bad_interrupt>
      16:	00 00       	nop
      18:	c6 c0       	rjmp	.+396    	; 0x1a6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c4 c0       	rjmp	.+392    	; 0x1a6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c2 c0       	rjmp	.+388    	; 0x1a6 <__bad_interrupt>
      22:	00 00       	nop
      24:	c0 c0       	rjmp	.+384    	; 0x1a6 <__bad_interrupt>
      26:	00 00       	nop
      28:	be c0       	rjmp	.+380    	; 0x1a6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bc c0       	rjmp	.+376    	; 0x1a6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ba c0       	rjmp	.+372    	; 0x1a6 <__bad_interrupt>
      32:	00 00       	nop
      34:	b8 c0       	rjmp	.+368    	; 0x1a6 <__bad_interrupt>
      36:	00 00       	nop
      38:	b6 c0       	rjmp	.+364    	; 0x1a6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b4 c0       	rjmp	.+360    	; 0x1a6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b2 c0       	rjmp	.+356    	; 0x1a6 <__bad_interrupt>
      42:	00 00       	nop
      44:	b0 c0       	rjmp	.+352    	; 0x1a6 <__bad_interrupt>
      46:	00 00       	nop
      48:	ae c0       	rjmp	.+348    	; 0x1a6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ac c0       	rjmp	.+344    	; 0x1a6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	aa c0       	rjmp	.+340    	; 0x1a6 <__bad_interrupt>
      52:	00 00       	nop
      54:	a8 c0       	rjmp	.+336    	; 0x1a6 <__bad_interrupt>
      56:	00 00       	nop
      58:	a6 c0       	rjmp	.+332    	; 0x1a6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a4 c0       	rjmp	.+328    	; 0x1a6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a2 c0       	rjmp	.+324    	; 0x1a6 <__bad_interrupt>
      62:	00 00       	nop
      64:	a0 c0       	rjmp	.+320    	; 0x1a6 <__bad_interrupt>
      66:	00 00       	nop
      68:	9e c0       	rjmp	.+316    	; 0x1a6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9c c0       	rjmp	.+312    	; 0x1a6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9a c0       	rjmp	.+308    	; 0x1a6 <__bad_interrupt>
      72:	00 00       	nop
      74:	98 c0       	rjmp	.+304    	; 0x1a6 <__bad_interrupt>
      76:	00 00       	nop
      78:	96 c0       	rjmp	.+300    	; 0x1a6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	94 c0       	rjmp	.+296    	; 0x1a6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	92 c0       	rjmp	.+292    	; 0x1a6 <__bad_interrupt>
      82:	00 00       	nop
      84:	90 c0       	rjmp	.+288    	; 0x1a6 <__bad_interrupt>
      86:	00 00       	nop
      88:	8e c0       	rjmp	.+284    	; 0x1a6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8c c0       	rjmp	.+280    	; 0x1a6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	8a c0       	rjmp	.+276    	; 0x1a6 <__bad_interrupt>
      92:	00 00       	nop
      94:	88 c0       	rjmp	.+272    	; 0x1a6 <__bad_interrupt>
      96:	00 00       	nop
      98:	86 c0       	rjmp	.+268    	; 0x1a6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	84 c0       	rjmp	.+264    	; 0x1a6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	82 c0       	rjmp	.+260    	; 0x1a6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	80 c0       	rjmp	.+256    	; 0x1a6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7e c0       	rjmp	.+252    	; 0x1a6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7c c0       	rjmp	.+248    	; 0x1a6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	7a c0       	rjmp	.+244    	; 0x1a6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	78 c0       	rjmp	.+240    	; 0x1a6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	76 c0       	rjmp	.+236    	; 0x1a6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	74 c0       	rjmp	.+232    	; 0x1a6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	72 c0       	rjmp	.+228    	; 0x1a6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	70 c0       	rjmp	.+224    	; 0x1a6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	6e c0       	rjmp	.+220    	; 0x1a6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	6c c0       	rjmp	.+216    	; 0x1a6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	6a c0       	rjmp	.+212    	; 0x1a6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	68 c0       	rjmp	.+208    	; 0x1a6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	66 c0       	rjmp	.+204    	; 0x1a6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	64 c0       	rjmp	.+200    	; 0x1a6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	62 c0       	rjmp	.+196    	; 0x1a6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	std	Y+40, r29	; 0x28
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	std	Y+56, r1	; 0x38
      f2:	ba ab       	std	Y+50, r27	; 0x32
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	std	Y+51, r10	; 0x33
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	std	Y+54, r27	; 0x36
     126:	aa aa       	std	Y+50, r10	; 0x32
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	ldd	r30, Z+49	; 0x31
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <_Z6directii+0x10c>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	13 e0       	ldi	r17, 0x03	; 3
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e6 e7       	ldi	r30, 0x76	; 118
     17e:	f7 e1       	ldi	r31, 0x17	; 23
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a0 38       	cpi	r26, 0x80	; 128
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	2a e0       	ldi	r18, 0x0A	; 10
     192:	a0 e8       	ldi	r26, 0x80	; 128
     194:	b3 e0       	ldi	r27, 0x03	; 3
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	ad 36       	cpi	r26, 0x6D	; 109
     19c:	b2 07       	cpc	r27, r18
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	17 d7       	rcall	.+3630   	; 0xfd0 <main>
     1a2:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <_exit>

000001a6 <__bad_interrupt>:
     1a6:	2c cf       	rjmp	.-424    	; 0x0 <__vectors>

000001a8 <_Z17buzzer_pin_configv>:
  to delete the edge if obstacle is there
*/
void rem_edge(int f, int s)
{
  edges[f][s] = 0;
  edges[s][f] = 0;
     1a8:	21 9a       	sbi	0x04, 1	; 4
     1aa:	29 98       	cbi	0x05, 1	; 5
     1ac:	08 95       	ret

000001ae <_Z9buzzer_onv>:
     1ae:	83 b1       	in	r24, 0x03	; 3
     1b0:	82 60       	ori	r24, 0x02	; 2
     1b2:	85 b9       	out	0x05, r24	; 5
     1b4:	08 95       	ret

000001b6 <_Z10buzzer_offv>:
     1b6:	83 b1       	in	r24, 0x03	; 3
     1b8:	8d 7f       	andi	r24, 0xFD	; 253
     1ba:	85 b9       	out	0x05, r24	; 5
     1bc:	08 95       	ret

000001be <_Z19init_devices_buzzerv>:
     1be:	f8 94       	cli
     1c0:	f3 df       	rcall	.-26     	; 0x1a8 <_Z17buzzer_pin_configv>
     1c2:	78 94       	sei
     1c4:	08 95       	ret

000001c6 <_Z8sound_onv>:
     1c6:	f3 df       	rcall	.-26     	; 0x1ae <_Z9buzzer_onv>
     1c8:	2a ea       	ldi	r18, 0xAA	; 170
     1ca:	34 ed       	ldi	r19, 0xD4	; 212
     1cc:	8c e1       	ldi	r24, 0x1C	; 28
     1ce:	91 e0       	ldi	r25, 0x01	; 1
     1d0:	21 50       	subi	r18, 0x01	; 1
     1d2:	30 40       	sbci	r19, 0x00	; 0
     1d4:	80 40       	sbci	r24, 0x00	; 0
     1d6:	90 40       	sbci	r25, 0x00	; 0
     1d8:	d9 f7       	brne	.-10     	; 0x1d0 <_Z8sound_onv+0xa>
     1da:	00 00       	nop
     1dc:	ec df       	rcall	.-40     	; 0x1b6 <_Z10buzzer_offv>
     1de:	2f ef       	ldi	r18, 0xFF	; 255
     1e0:	33 ed       	ldi	r19, 0xD3	; 211
     1e2:	80 e3       	ldi	r24, 0x30	; 48
     1e4:	21 50       	subi	r18, 0x01	; 1
     1e6:	30 40       	sbci	r19, 0x00	; 0
     1e8:	80 40       	sbci	r24, 0x00	; 0
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <_Z8sound_onv+0x1e>
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <_Z8sound_onv+0x28>
     1ee:	00 00       	nop
     1f0:	08 95       	ret

000001f2 <_Z17servo1_pin_configv>:
     1f2:	25 9a       	sbi	0x04, 5	; 4
     1f4:	2d 9a       	sbi	0x05, 5	; 5
     1f6:	08 95       	ret

000001f8 <_Z17servo2_pin_configv>:
     1f8:	26 9a       	sbi	0x04, 6	; 4
     1fa:	2e 9a       	sbi	0x05, 6	; 5
     1fc:	08 95       	ret

000001fe <_Z15port_init_servov>:
     1fe:	f9 df       	rcall	.-14     	; 0x1f2 <_Z17servo1_pin_configv>
     200:	fb cf       	rjmp	.-10     	; 0x1f8 <_Z17servo2_pin_configv>
     202:	08 95       	ret

00000204 <_Z11timer1_initv>:
     204:	e1 e8       	ldi	r30, 0x81	; 129
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	10 82       	st	Z, r1
     20a:	8c ef       	ldi	r24, 0xFC	; 252
     20c:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
     216:	93 e0       	ldi	r25, 0x03	; 3
     218:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
     21c:	8f ef       	ldi	r24, 0xFF	; 255
     21e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
     222:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
     226:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
     22a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
     22e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
     232:	8b ea       	ldi	r24, 0xAB	; 171
     234:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     238:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
     23c:	8c e0       	ldi	r24, 0x0C	; 12
     23e:	80 83       	st	Z, r24
     240:	08 95       	ret

00000242 <_Z18init_devices_servov>:
     242:	f8 94       	cli
     244:	dc df       	rcall	.-72     	; 0x1fe <_Z15port_init_servov>
     246:	de df       	rcall	.-68     	; 0x204 <_Z11timer1_initv>
     248:	78 94       	sei
     24a:	08 95       	ret

0000024c <_Z23Sharp_GP2D12_estimationh>:
     24c:	68 2f       	mov	r22, r24
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__floatunsisf>
     258:	2f ee       	ldi	r18, 0xEF	; 239
     25a:	39 ec       	ldi	r19, 0xC9	; 201
     25c:	43 e9       	ldi	r20, 0x93	; 147
     25e:	5f e3       	ldi	r21, 0x3F	; 63
     260:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <pow>
     264:	9b 01       	movw	r18, r22
     266:	ac 01       	movw	r20, r24
     268:	60 e0       	ldi	r22, 0x00	; 0
     26a:	70 e0       	ldi	r23, 0x00	; 0
     26c:	80 e8       	ldi	r24, 0x80	; 128
     26e:	9f e3       	ldi	r25, 0x3F	; 63
     270:	91 d7       	rcall	.+3874   	; 0x1194 <__divsf3>
     272:	2a e9       	ldi	r18, 0x9A	; 154
     274:	39 ef       	ldi	r19, 0xF9	; 249
     276:	4e e2       	ldi	r20, 0x2E	; 46
     278:	55 e4       	ldi	r21, 0x45	; 69
     27a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__mulsf3>
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	40 e2       	ldi	r20, 0x20	; 32
     284:	51 e4       	ldi	r21, 0x41	; 65
     286:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__mulsf3>
     28a:	ec d7       	rcall	.+4056   	; 0x1264 <__fixsfsi>
     28c:	cb 01       	movw	r24, r22
     28e:	61 32       	cpi	r22, 0x21	; 33
     290:	73 40       	sbci	r23, 0x03	; 3
     292:	10 f0       	brcs	.+4      	; 0x298 <_Z23Sharp_GP2D12_estimationh+0x4c>
     294:	80 e2       	ldi	r24, 0x20	; 32
     296:	93 e0       	ldi	r25, 0x03	; 3
     298:	08 95       	ret

0000029a <_Z14adc_pin_configv>:
     29a:	10 ba       	out	0x10, r1	; 16
     29c:	11 ba       	out	0x11, r1	; 17
     29e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
     2a2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     2a6:	08 95       	ret

000002a8 <_Z17motion_pin_configv>:
     2a8:	81 b1       	in	r24, 0x01	; 1
     2aa:	8f 60       	ori	r24, 0x0F	; 15
     2ac:	81 b9       	out	0x01, r24	; 1
     2ae:	82 b1       	in	r24, 0x02	; 2
     2b0:	80 7f       	andi	r24, 0xF0	; 240
     2b2:	82 b9       	out	0x02, r24	; 2
     2b4:	ea e0       	ldi	r30, 0x0A	; 10
     2b6:	f1 e0       	ldi	r31, 0x01	; 1
     2b8:	80 81       	ld	r24, Z
     2ba:	88 61       	ori	r24, 0x18	; 24
     2bc:	80 83       	st	Z, r24
     2be:	eb e0       	ldi	r30, 0x0B	; 11
     2c0:	f1 e0       	ldi	r31, 0x01	; 1
     2c2:	80 81       	ld	r24, Z
     2c4:	88 61       	ori	r24, 0x18	; 24
     2c6:	80 83       	st	Z, r24
     2c8:	08 95       	ret

000002ca <_Z13port_init_lfrv>:
     2ca:	e7 df       	rcall	.-50     	; 0x29a <_Z14adc_pin_configv>
     2cc:	ed cf       	rjmp	.-38     	; 0x2a8 <_Z17motion_pin_configv>
     2ce:	08 95       	ret

000002d0 <_Z11timer5_initv>:
     2d0:	e1 e2       	ldi	r30, 0x21	; 33
     2d2:	f1 e0       	ldi	r31, 0x01	; 1
     2d4:	10 82       	st	Z, r1
     2d6:	8f ef       	ldi	r24, 0xFF	; 255
     2d8:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
     2e2:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
     2e6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     2ea:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
     2ee:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
     2f2:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
     2f6:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
     2fa:	89 ea       	ldi	r24, 0xA9	; 169
     2fc:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
     300:	8b e0       	ldi	r24, 0x0B	; 11
     302:	80 83       	st	Z, r24
     304:	08 95       	ret

00000306 <_Z8adc_initv>:
     306:	ea e7       	ldi	r30, 0x7A	; 122
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	10 82       	st	Z, r1
     30c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     310:	80 e2       	ldi	r24, 0x20	; 32
     312:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     316:	80 e8       	ldi	r24, 0x80	; 128
     318:	80 bf       	out	0x30, r24	; 48
     31a:	86 e8       	ldi	r24, 0x86	; 134
     31c:	80 83       	st	Z, r24
     31e:	08 95       	ret

00000320 <_Z14ADC_Conversionh>:
     320:	88 30       	cpi	r24, 0x08	; 8
     322:	18 f0       	brcs	.+6      	; 0x32a <_Z14ADC_Conversionh+0xa>
     324:	98 e0       	ldi	r25, 0x08	; 8
     326:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     32a:	87 70       	andi	r24, 0x07	; 7
     32c:	80 62       	ori	r24, 0x20	; 32
     32e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
     332:	ea e7       	ldi	r30, 0x7A	; 122
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	80 81       	ld	r24, Z
     338:	80 64       	ori	r24, 0x40	; 64
     33a:	80 83       	st	Z, r24
     33c:	80 81       	ld	r24, Z
     33e:	84 ff       	sbrs	r24, 4
     340:	fd cf       	rjmp	.-6      	; 0x33c <_Z14ADC_Conversionh+0x1c>
     342:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
     346:	ea e7       	ldi	r30, 0x7A	; 122
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	90 81       	ld	r25, Z
     34c:	90 61       	ori	r25, 0x10	; 16
     34e:	90 83       	st	Z, r25
     350:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     354:	08 95       	ret

00000356 <_Z21sharp_sensor_distancev>:
     356:	89 e0       	ldi	r24, 0x09	; 9
     358:	e3 df       	rcall	.-58     	; 0x320 <_Z14ADC_Conversionh>
     35a:	80 93 6c 0a 	sts	0x0A6C, r24	; 0x800a6c <sharp>
     35e:	76 cf       	rjmp	.-276    	; 0x24c <_Z23Sharp_GP2D12_estimationh>
     360:	08 95       	ret

00000362 <_Z10motion_seth>:
     362:	92 b1       	in	r25, 0x02	; 2
     364:	90 7f       	andi	r25, 0xF0	; 240
     366:	8f 70       	andi	r24, 0x0F	; 15
     368:	98 2b       	or	r25, r24
     36a:	92 b9       	out	0x02, r25	; 2
     36c:	08 95       	ret

0000036e <_Z7forwardv>:
     36e:	82 ed       	ldi	r24, 0xD2	; 210
     370:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
     374:	88 ec       	ldi	r24, 0xC8	; 200
     376:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
     37a:	86 e0       	ldi	r24, 0x06	; 6
     37c:	f2 cf       	rjmp	.-28     	; 0x362 <_Z10motion_seth>
     37e:	08 95       	ret

00000380 <_Z4stopv>:
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	ef cf       	rjmp	.-34     	; 0x362 <_Z10motion_seth>
     384:	08 95       	ret

00000386 <_Z9left_turnv>:
     386:	8a e0       	ldi	r24, 0x0A	; 10
     388:	ec cf       	rjmp	.-40     	; 0x362 <_Z10motion_seth>
     38a:	08 95       	ret

0000038c <_Z10right_turnv>:
     38c:	85 e0       	ldi	r24, 0x05	; 5
     38e:	e9 cf       	rjmp	.-46     	; 0x362 <_Z10motion_seth>
     390:	08 95       	ret

00000392 <_Z11right_mudjav>:
     392:	fc df       	rcall	.-8      	; 0x38c <_Z10right_turnv>
     394:	2f ef       	ldi	r18, 0xFF	; 255
     396:	83 ec       	ldi	r24, 0xC3	; 195
     398:	99 e0       	ldi	r25, 0x09	; 9
     39a:	21 50       	subi	r18, 0x01	; 1
     39c:	80 40       	sbci	r24, 0x00	; 0
     39e:	90 40       	sbci	r25, 0x00	; 0
     3a0:	e1 f7       	brne	.-8      	; 0x39a <_Z11right_mudjav+0x8>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <_Z11right_mudjav+0x12>
     3a4:	00 00       	nop
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	bb df       	rcall	.-138    	; 0x320 <_Z14ADC_Conversionh>
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <thresh>
     3b0:	30 91 73 03 	lds	r19, 0x0373	; 0x800373 <thresh+0x1>
     3b4:	82 17       	cp	r24, r18
     3b6:	93 07       	cpc	r25, r19
     3b8:	14 f4       	brge	.+4      	; 0x3be <_Z11right_mudjav+0x2c>
     3ba:	e8 df       	rcall	.-48     	; 0x38c <_Z10right_turnv>
     3bc:	f4 cf       	rjmp	.-24     	; 0x3a6 <_Z11right_mudjav+0x14>
     3be:	2f ef       	ldi	r18, 0xFF	; 255
     3c0:	80 e7       	ldi	r24, 0x70	; 112
     3c2:	92 e0       	ldi	r25, 0x02	; 2
     3c4:	21 50       	subi	r18, 0x01	; 1
     3c6:	80 40       	sbci	r24, 0x00	; 0
     3c8:	90 40       	sbci	r25, 0x00	; 0
     3ca:	e1 f7       	brne	.-8      	; 0x3c4 <_Z11right_mudjav+0x32>
     3cc:	00 c0       	rjmp	.+0      	; 0x3ce <_Z11right_mudjav+0x3c>
     3ce:	00 00       	nop
     3d0:	08 95       	ret

000003d2 <_Z10left_mudjav>:
     3d2:	d9 df       	rcall	.-78     	; 0x386 <_Z9left_turnv>
     3d4:	2f ef       	ldi	r18, 0xFF	; 255
     3d6:	83 ec       	ldi	r24, 0xC3	; 195
     3d8:	99 e0       	ldi	r25, 0x09	; 9
     3da:	21 50       	subi	r18, 0x01	; 1
     3dc:	80 40       	sbci	r24, 0x00	; 0
     3de:	90 40       	sbci	r25, 0x00	; 0
     3e0:	e1 f7       	brne	.-8      	; 0x3da <_Z10left_mudjav+0x8>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <_Z10left_mudjav+0x12>
     3e4:	00 00       	nop
     3e6:	83 e0       	ldi	r24, 0x03	; 3
     3e8:	9b df       	rcall	.-202    	; 0x320 <_Z14ADC_Conversionh>
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <thresh>
     3f0:	30 91 73 03 	lds	r19, 0x0373	; 0x800373 <thresh+0x1>
     3f4:	82 17       	cp	r24, r18
     3f6:	93 07       	cpc	r25, r19
     3f8:	14 f4       	brge	.+4      	; 0x3fe <_Z10left_mudjav+0x2c>
     3fa:	c5 df       	rcall	.-118    	; 0x386 <_Z9left_turnv>
     3fc:	f4 cf       	rjmp	.-24     	; 0x3e6 <_Z10left_mudjav+0x14>
     3fe:	2f ef       	ldi	r18, 0xFF	; 255
     400:	80 e7       	ldi	r24, 0x70	; 112
     402:	92 e0       	ldi	r25, 0x02	; 2
     404:	21 50       	subi	r18, 0x01	; 1
     406:	80 40       	sbci	r24, 0x00	; 0
     408:	90 40       	sbci	r25, 0x00	; 0
     40a:	e1 f7       	brne	.-8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     40c:	00 c0       	rjmp	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40e:	00 00       	nop
     410:	08 95       	ret

00000412 <_Z16init_devices_lfrv>:
     412:	f8 94       	cli
     414:	5a df       	rcall	.-332    	; 0x2ca <_Z13port_init_lfrv>
     416:	77 df       	rcall	.-274    	; 0x306 <_Z8adc_initv>
     418:	5b df       	rcall	.-330    	; 0x2d0 <_Z11timer5_initv>
     41a:	78 94       	sei
     41c:	08 95       	ret

0000041e <_Z15calculate_errorv>:
     41e:	82 e0       	ldi	r24, 0x02	; 2
     420:	7f df       	rcall	.-258    	; 0x320 <_Z14ADC_Conversionh>
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <thresh>
     428:	30 91 73 03 	lds	r19, 0x0373	; 0x800373 <thresh+0x1>
     42c:	28 17       	cp	r18, r24
     42e:	39 07       	cpc	r19, r25
     430:	24 f4       	brge	.+8      	; 0x43a <_Z15calculate_errorv+0x1c>
     432:	10 92 6b 0a 	sts	0x0A6B, r1	; 0x800a6b <error+0x1>
     436:	10 92 6a 0a 	sts	0x0A6A, r1	; 0x800a6a <error>
     43a:	83 e0       	ldi	r24, 0x03	; 3
     43c:	71 df       	rcall	.-286    	; 0x320 <_Z14ADC_Conversionh>
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <thresh>
     444:	30 91 73 03 	lds	r19, 0x0373	; 0x800373 <thresh+0x1>
     448:	28 17       	cp	r18, r24
     44a:	39 07       	cpc	r19, r25
     44c:	34 f4       	brge	.+12     	; 0x45a <_Z15calculate_errorv+0x3c>
     44e:	8f ef       	ldi	r24, 0xFF	; 255
     450:	9f ef       	ldi	r25, 0xFF	; 255
     452:	90 93 6b 0a 	sts	0x0A6B, r25	; 0x800a6b <error+0x1>
     456:	80 93 6a 0a 	sts	0x0A6A, r24	; 0x800a6a <error>
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	61 df       	rcall	.-318    	; 0x320 <_Z14ADC_Conversionh>
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <thresh>
     464:	30 91 73 03 	lds	r19, 0x0373	; 0x800373 <thresh+0x1>
     468:	28 17       	cp	r18, r24
     46a:	39 07       	cpc	r19, r25
     46c:	34 f4       	brge	.+12     	; 0x47a <_Z15calculate_errorv+0x5c>
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	90 93 6b 0a 	sts	0x0A6B, r25	; 0x800a6b <error+0x1>
     476:	80 93 6a 0a 	sts	0x0A6A, r24	; 0x800a6a <error>
     47a:	83 e0       	ldi	r24, 0x03	; 3
     47c:	51 df       	rcall	.-350    	; 0x320 <_Z14ADC_Conversionh>
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <thresh>
     484:	30 91 73 03 	lds	r19, 0x0373	; 0x800373 <thresh+0x1>
     488:	82 17       	cp	r24, r18
     48a:	93 07       	cpc	r25, r19
     48c:	64 f4       	brge	.+24     	; 0x4a6 <_Z15calculate_errorv+0x88>
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	47 df       	rcall	.-370    	; 0x320 <_Z14ADC_Conversionh>
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <thresh>
     498:	30 91 73 03 	lds	r19, 0x0373	; 0x800373 <thresh+0x1>
     49c:	82 17       	cp	r24, r18
     49e:	93 07       	cpc	r25, r19
     4a0:	14 f4       	brge	.+4      	; 0x4a6 <_Z15calculate_errorv+0x88>
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	3d cf       	rjmp	.-390    	; 0x320 <_Z14ADC_Conversionh>
     4a6:	08 95       	ret

000004a8 <_Z12drive_motorsv>:
     4a8:	80 91 6a 0a 	lds	r24, 0x0A6A	; 0x800a6a <error>
     4ac:	90 91 6b 0a 	lds	r25, 0x0A6B	; 0x800a6b <error+0x1>
     4b0:	00 97       	sbiw	r24, 0x00	; 0
     4b2:	11 f4       	brne	.+4      	; 0x4b8 <_Z12drive_motorsv+0x10>
     4b4:	5c cf       	rjmp	.-328    	; 0x36e <_Z7forwardv>
     4b6:	08 95       	ret
     4b8:	81 30       	cpi	r24, 0x01	; 1
     4ba:	91 05       	cpc	r25, r1
     4bc:	11 f4       	brne	.+4      	; 0x4c2 <_Z12drive_motorsv+0x1a>
     4be:	66 cf       	rjmp	.-308    	; 0x38c <_Z10right_turnv>
     4c0:	08 95       	ret
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	09 f4       	brne	.+2      	; 0x4c8 <_Z12drive_motorsv+0x20>
     4c6:	5f cf       	rjmp	.-322    	; 0x386 <_Z9left_turnv>
     4c8:	08 95       	ret

000004ca <_Z13line_followerv>:
     4ca:	a9 df       	rcall	.-174    	; 0x41e <_Z15calculate_errorv>
     4cc:	ed cf       	rjmp	.-38     	; 0x4a8 <_Z12drive_motorsv>
     4ce:	08 95       	ret

000004d0 <_Z15forward_by_nodeh>:
     4d0:	0f 93       	push	r16
     4d2:	1f 93       	push	r17
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	c8 2f       	mov	r28, r24
     4da:	49 df       	rcall	.-366    	; 0x36e <_Z7forwardv>
     4dc:	2f ef       	ldi	r18, 0xFF	; 255
     4de:	80 e7       	ldi	r24, 0x70	; 112
     4e0:	92 e0       	ldi	r25, 0x02	; 2
     4e2:	21 50       	subi	r18, 0x01	; 1
     4e4:	80 40       	sbci	r24, 0x00	; 0
     4e6:	90 40       	sbci	r25, 0x00	; 0
     4e8:	e1 f7       	brne	.-8      	; 0x4e2 <_Z15forward_by_nodeh+0x12>
     4ea:	00 c0       	rjmp	.+0      	; 0x4ec <_Z15forward_by_nodeh+0x1c>
     4ec:	00 00       	nop
     4ee:	d0 e0       	ldi	r29, 0x00	; 0
     4f0:	00 e0       	ldi	r16, 0x00	; 0
     4f2:	10 e0       	ldi	r17, 0x00	; 0
     4f4:	0c 17       	cp	r16, r28
     4f6:	1d 07       	cpc	r17, r29
     4f8:	09 f4       	brne	.+2      	; 0x4fc <_Z15forward_by_nodeh+0x2c>
     4fa:	68 c0       	rjmp	.+208    	; 0x5cc <_Z15forward_by_nodeh+0xfc>
     4fc:	e6 df       	rcall	.-52     	; 0x4ca <_Z13line_followerv>
     4fe:	2b df       	rcall	.-426    	; 0x356 <_Z21sharp_sensor_distancev>
     500:	90 93 69 0a 	sts	0x0A69, r25	; 0x800a69 <distance_sharp+0x1>
     504:	80 93 68 0a 	sts	0x0A68, r24	; 0x800a68 <distance_sharp>
     508:	80 35       	cpi	r24, 0x50	; 80
     50a:	91 05       	cpc	r25, r1
     50c:	1c f4       	brge	.+6      	; 0x514 <_Z15forward_by_nodeh+0x44>
     50e:	38 df       	rcall	.-400    	; 0x380 <_Z4stopv>
     510:	5a de       	rcall	.-844    	; 0x1c6 <_Z8sound_onv>
     512:	5c c0       	rjmp	.+184    	; 0x5cc <_Z15forward_by_nodeh+0xfc>
     514:	83 e0       	ldi	r24, 0x03	; 3
     516:	04 df       	rcall	.-504    	; 0x320 <_Z14ADC_Conversionh>
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <thresh>
     51e:	30 91 73 03 	lds	r19, 0x0373	; 0x800373 <thresh+0x1>
     522:	28 17       	cp	r18, r24
     524:	39 07       	cpc	r19, r25
     526:	54 f4       	brge	.+20     	; 0x53c <_Z15forward_by_nodeh+0x6c>
     528:	82 e0       	ldi	r24, 0x02	; 2
     52a:	fa de       	rcall	.-524    	; 0x320 <_Z14ADC_Conversionh>
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <thresh>
     532:	30 91 73 03 	lds	r19, 0x0373	; 0x800373 <thresh+0x1>
     536:	28 17       	cp	r18, r24
     538:	39 07       	cpc	r19, r25
     53a:	ac f0       	brlt	.+42     	; 0x566 <_Z15forward_by_nodeh+0x96>
     53c:	82 e0       	ldi	r24, 0x02	; 2
     53e:	f0 de       	rcall	.-544    	; 0x320 <_Z14ADC_Conversionh>
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <thresh>
     546:	30 91 73 03 	lds	r19, 0x0373	; 0x800373 <thresh+0x1>
     54a:	28 17       	cp	r18, r24
     54c:	39 07       	cpc	r19, r25
     54e:	94 f6       	brge	.-92     	; 0x4f4 <_Z15forward_by_nodeh+0x24>
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	e6 de       	rcall	.-564    	; 0x320 <_Z14ADC_Conversionh>
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <thresh>
     55a:	30 91 73 03 	lds	r19, 0x0373	; 0x800373 <thresh+0x1>
     55e:	28 17       	cp	r18, r24
     560:	39 07       	cpc	r19, r25
     562:	0c f0       	brlt	.+2      	; 0x566 <_Z15forward_by_nodeh+0x96>
     564:	c7 cf       	rjmp	.-114    	; 0x4f4 <_Z15forward_by_nodeh+0x24>
     566:	83 e0       	ldi	r24, 0x03	; 3
     568:	db de       	rcall	.-586    	; 0x320 <_Z14ADC_Conversionh>
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <thresh>
     570:	30 91 73 03 	lds	r19, 0x0373	; 0x800373 <thresh+0x1>
     574:	28 17       	cp	r18, r24
     576:	39 07       	cpc	r19, r25
     578:	54 f4       	brge	.+20     	; 0x58e <_Z15forward_by_nodeh+0xbe>
     57a:	82 e0       	ldi	r24, 0x02	; 2
     57c:	d1 de       	rcall	.-606    	; 0x320 <_Z14ADC_Conversionh>
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <thresh>
     584:	30 91 73 03 	lds	r19, 0x0373	; 0x800373 <thresh+0x1>
     588:	28 17       	cp	r18, r24
     58a:	39 07       	cpc	r19, r25
     58c:	a4 f0       	brlt	.+40     	; 0x5b6 <_Z15forward_by_nodeh+0xe6>
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	c7 de       	rcall	.-626    	; 0x320 <_Z14ADC_Conversionh>
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <thresh>
     598:	30 91 73 03 	lds	r19, 0x0373	; 0x800373 <thresh+0x1>
     59c:	28 17       	cp	r18, r24
     59e:	39 07       	cpc	r19, r25
     5a0:	64 f4       	brge	.+24     	; 0x5ba <_Z15forward_by_nodeh+0xea>
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	bd de       	rcall	.-646    	; 0x320 <_Z14ADC_Conversionh>
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <thresh>
     5ac:	30 91 73 03 	lds	r19, 0x0373	; 0x800373 <thresh+0x1>
     5b0:	28 17       	cp	r18, r24
     5b2:	39 07       	cpc	r19, r25
     5b4:	14 f4       	brge	.+4      	; 0x5ba <_Z15forward_by_nodeh+0xea>
     5b6:	db de       	rcall	.-586    	; 0x36e <_Z7forwardv>
     5b8:	d6 cf       	rjmp	.-84     	; 0x566 <_Z15forward_by_nodeh+0x96>
     5ba:	8f e3       	ldi	r24, 0x3F	; 63
     5bc:	9c e9       	ldi	r25, 0x9C	; 156
     5be:	01 97       	sbiw	r24, 0x01	; 1
     5c0:	f1 f7       	brne	.-4      	; 0x5be <_Z15forward_by_nodeh+0xee>
     5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <_Z15forward_by_nodeh+0xf4>
     5c4:	00 00       	nop
     5c6:	0f 5f       	subi	r16, 0xFF	; 255
     5c8:	1f 4f       	sbci	r17, 0xFF	; 255
     5ca:	94 cf       	rjmp	.-216    	; 0x4f4 <_Z15forward_by_nodeh+0x24>
     5cc:	d0 de       	rcall	.-608    	; 0x36e <_Z7forwardv>
     5ce:	9f ef       	ldi	r25, 0xFF	; 255
     5d0:	24 e3       	ldi	r18, 0x34	; 52
     5d2:	8c e0       	ldi	r24, 0x0C	; 12
     5d4:	91 50       	subi	r25, 0x01	; 1
     5d6:	20 40       	sbci	r18, 0x00	; 0
     5d8:	80 40       	sbci	r24, 0x00	; 0
     5da:	e1 f7       	brne	.-8      	; 0x5d4 <_Z15forward_by_nodeh+0x104>
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <_Z15forward_by_nodeh+0x10e>
     5de:	00 00       	nop
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	08 95       	ret

000005ea <_Z12init_devicesv>:
     5ea:	e9 dd       	rcall	.-1070   	; 0x1be <_Z19init_devices_buzzerv>
     5ec:	12 df       	rcall	.-476    	; 0x412 <_Z16init_devices_lfrv>
     5ee:	29 ce       	rjmp	.-942    	; 0x242 <_Z18init_devices_servov>
     5f0:	08 95       	ret

000005f2 <_Z6reiniti>:
     5f2:	18 16       	cp	r1, r24
     5f4:	19 06       	cpc	r1, r25
     5f6:	d4 f4       	brge	.+52     	; 0x62c <_Z6reiniti+0x3a>
     5f8:	42 e9       	ldi	r20, 0x92	; 146
     5fa:	53 e0       	ldi	r21, 0x03	; 3
     5fc:	2a e3       	ldi	r18, 0x3A	; 58
     5fe:	28 9f       	mul	r18, r24
     600:	b0 01       	movw	r22, r0
     602:	29 9f       	mul	r18, r25
     604:	70 0d       	add	r23, r0
     606:	11 24       	eor	r1, r1
     608:	6e 56       	subi	r22, 0x6E	; 110
     60a:	7c 4f       	sbci	r23, 0xFC	; 252
     60c:	88 0f       	add	r24, r24
     60e:	99 1f       	adc	r25, r25
     610:	9a 01       	movw	r18, r20
     612:	28 0f       	add	r18, r24
     614:	39 1f       	adc	r19, r25
     616:	fa 01       	movw	r30, r20
     618:	11 92       	st	Z+, r1
     61a:	11 92       	st	Z+, r1
     61c:	e2 17       	cp	r30, r18
     61e:	f3 07       	cpc	r31, r19
     620:	d9 f7       	brne	.-10     	; 0x618 <_Z6reiniti+0x26>
     622:	46 5c       	subi	r20, 0xC6	; 198
     624:	5f 4f       	sbci	r21, 0xFF	; 255
     626:	46 17       	cp	r20, r22
     628:	57 07       	cpc	r21, r23
     62a:	91 f7       	brne	.-28     	; 0x610 <_Z6reiniti+0x1e>
     62c:	08 95       	ret

0000062e <_Z11createGraphv>:
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <edges+0x3f>
     636:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <edges+0x3e>
  edges[s][f] = 1;
     63a:	90 93 09 04 	sts	0x0409, r25	; 0x800409 <edges+0x77>
     63e:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <edges+0x76>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     642:	90 93 0d 04 	sts	0x040D, r25	; 0x80040d <edges+0x7b>
     646:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <edges+0x7a>
  edges[s][f] = 1;
     64a:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <edges+0xb3>
     64e:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <edges+0xb2>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     652:	90 93 49 04 	sts	0x0449, r25	; 0x800449 <edges+0xb7>
     656:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <edges+0xb6>
  edges[s][f] = 1;
     65a:	90 93 81 04 	sts	0x0481, r25	; 0x800481 <edges+0xef>
     65e:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <edges+0xee>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     662:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <edges+0xf3>
     666:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <edges+0xf2>
  edges[s][f] = 1;
     66a:	90 93 bd 04 	sts	0x04BD, r25	; 0x8004bd <edges+0x12b>
     66e:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <edges+0x12a>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     672:	90 93 c1 04 	sts	0x04C1, r25	; 0x8004c1 <edges+0x12f>
     676:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <edges+0x12e>
  edges[s][f] = 1;
     67a:	90 93 f9 04 	sts	0x04F9, r25	; 0x8004f9 <edges+0x167>
     67e:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <edges+0x166>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     682:	90 93 4f 04 	sts	0x044F, r25	; 0x80044f <edges+0xbd>
     686:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <edges+0xbc>
  edges[s][f] = 1;
     68a:	90 93 2f 05 	sts	0x052F, r25	; 0x80052f <edges+0x19d>
     68e:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <edges+0x19c>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     692:	90 93 39 05 	sts	0x0539, r25	; 0x800539 <edges+0x1a7>
     696:	80 93 38 05 	sts	0x0538, r24	; 0x800538 <edges+0x1a6>
  edges[s][f] = 1;
     69a:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <edges+0x1df>
     69e:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <edges+0x1de>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     6a2:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <edges+0x1e3>
     6a6:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <edges+0x1e2>
  edges[s][f] = 1;
     6aa:	90 93 ad 05 	sts	0x05AD, r25	; 0x8005ad <edges+0x21b>
     6ae:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <edges+0x21a>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     6b2:	90 93 7b 05 	sts	0x057B, r25	; 0x80057b <edges+0x1e9>
     6b6:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <edges+0x1e8>
  edges[s][f] = 1;
     6ba:	90 93 5b 06 	sts	0x065B, r25	; 0x80065b <edges+0x2c9>
     6be:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <edges+0x2c8>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     6c2:	90 93 b7 05 	sts	0x05B7, r25	; 0x8005b7 <edges+0x225>
     6c6:	80 93 b6 05 	sts	0x05B6, r24	; 0x8005b6 <edges+0x224>
  edges[s][f] = 1;
     6ca:	90 93 97 06 	sts	0x0697, r25	; 0x800697 <edges+0x305>
     6ce:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <edges+0x304>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     6d2:	90 93 9d 06 	sts	0x069D, r25	; 0x80069d <edges+0x30b>
     6d6:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <edges+0x30a>
  edges[s][f] = 1;
     6da:	90 93 65 06 	sts	0x0665, r25	; 0x800665 <edges+0x2d3>
     6de:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <edges+0x2d2>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     6e2:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <edges+0x137>
     6e6:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <edges+0x136>
  edges[s][f] = 1;
     6ea:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <edges+0x24f>
     6ee:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <edges+0x24e>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     6f2:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <edges+0x173>
     6f6:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <edges+0x172>
  edges[s][f] = 1;
     6fa:	90 93 1d 06 	sts	0x061D, r25	; 0x80061d <edges+0x28b>
     6fe:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <edges+0x28a>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     702:	90 93 25 06 	sts	0x0625, r25	; 0x800625 <edges+0x293>
     706:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <edges+0x292>
  edges[s][f] = 1;
     70a:	90 93 ed 05 	sts	0x05ED, r25	; 0x8005ed <edges+0x25b>
     70e:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <edges+0x25a>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     712:	90 93 b1 06 	sts	0x06B1, r25	; 0x8006b1 <edges+0x31f>
     716:	80 93 b0 06 	sts	0x06B0, r24	; 0x8006b0 <edges+0x31e>
  edges[s][f] = 1;
     71a:	90 93 a9 08 	sts	0x08A9, r25	; 0x8008a9 <edges+0x517>
     71e:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <edges+0x516>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     722:	90 93 bd 08 	sts	0x08BD, r25	; 0x8008bd <edges+0x52b>
     726:	80 93 bc 08 	sts	0x08BC, r24	; 0x8008bc <edges+0x52a>
  edges[s][f] = 1;
     72a:	90 93 f5 08 	sts	0x08F5, r25	; 0x8008f5 <edges+0x563>
     72e:	80 93 f4 08 	sts	0x08F4, r24	; 0x8008f4 <edges+0x562>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     732:	90 93 b9 08 	sts	0x08B9, r25	; 0x8008b9 <edges+0x527>
     736:	80 93 b8 08 	sts	0x08B8, r24	; 0x8008b8 <edges+0x526>
  edges[s][f] = 1;
     73a:	90 93 81 08 	sts	0x0881, r25	; 0x800881 <edges+0x4ef>
     73e:	80 93 80 08 	sts	0x0880, r24	; 0x800880 <edges+0x4ee>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     742:	90 93 7d 08 	sts	0x087D, r25	; 0x80087d <edges+0x4eb>
     746:	80 93 7c 08 	sts	0x087C, r24	; 0x80087c <edges+0x4ea>
  edges[s][f] = 1;
     74a:	90 93 45 08 	sts	0x0845, r25	; 0x800845 <edges+0x4b3>
     74e:	80 93 44 08 	sts	0x0844, r24	; 0x800844 <edges+0x4b2>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     752:	90 93 33 06 	sts	0x0633, r25	; 0x800633 <edges+0x2a1>
     756:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <edges+0x2a0>
  edges[s][f] = 1;
     75a:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <edges+0x3f1>
     75e:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <edges+0x3f0>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     762:	90 93 91 07 	sts	0x0791, r25	; 0x800791 <edges+0x3ff>
     766:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <edges+0x3fe>
  edges[s][f] = 1;
     76a:	90 93 c9 07 	sts	0x07C9, r25	; 0x8007c9 <edges+0x437>
     76e:	80 93 c8 07 	sts	0x07C8, r24	; 0x8007c8 <edges+0x436>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     772:	90 93 8d 07 	sts	0x078D, r25	; 0x80078d <edges+0x3fb>
     776:	80 93 8c 07 	sts	0x078C, r24	; 0x80078c <edges+0x3fa>
  edges[s][f] = 1;
     77a:	90 93 55 07 	sts	0x0755, r25	; 0x800755 <edges+0x3c3>
     77e:	80 93 54 07 	sts	0x0754, r24	; 0x800754 <edges+0x3c2>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     782:	90 93 51 07 	sts	0x0751, r25	; 0x800751 <edges+0x3bf>
     786:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <edges+0x3be>
  edges[s][f] = 1;
     78a:	90 93 19 07 	sts	0x0719, r25	; 0x800719 <edges+0x387>
     78e:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <edges+0x386>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     792:	90 93 71 06 	sts	0x0671, r25	; 0x800671 <edges+0x2df>
     796:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <edges+0x2de>
  edges[s][f] = 1;
     79a:	90 93 f9 07 	sts	0x07F9, r25	; 0x8007f9 <edges+0x467>
     79e:	80 93 f8 07 	sts	0x07F8, r24	; 0x8007f8 <edges+0x466>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     7a2:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <edges+0x477>
     7a6:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <edges+0x476>
  edges[s][f] = 1;
     7aa:	90 93 41 08 	sts	0x0841, r25	; 0x800841 <edges+0x4af>
     7ae:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <edges+0x4ae>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     7b2:	90 93 f3 05 	sts	0x05F3, r25	; 0x8005f3 <edges+0x261>
     7b6:	80 93 f2 05 	sts	0x05F2, r24	; 0x8005f2 <edges+0x260>
  edges[s][f] = 1;
     7ba:	90 93 d3 06 	sts	0x06D3, r25	; 0x8006d3 <edges+0x341>
     7be:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <edges+0x340>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     7c2:	90 93 dd 06 	sts	0x06DD, r25	; 0x8006dd <edges+0x34b>
     7c6:	80 93 dc 06 	sts	0x06DC, r24	; 0x8006dc <edges+0x34a>
  edges[s][f] = 1;
     7ca:	90 93 15 07 	sts	0x0715, r25	; 0x800715 <edges+0x383>
     7ce:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <edges+0x382>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     7d2:	90 93 e5 07 	sts	0x07E5, r25	; 0x8007e5 <edges+0x453>
     7d6:	80 93 e4 07 	sts	0x07E4, r24	; 0x8007e4 <edges+0x452>
  edges[s][f] = 1;
     7da:	90 93 2d 04 	sts	0x042D, r25	; 0x80042d <edges+0x9b>
     7de:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <edges+0x9a>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     7e2:	90 93 c3 06 	sts	0x06C3, r25	; 0x8006c3 <edges+0x331>
     7e6:	80 93 c2 06 	sts	0x06C2, r24	; 0x8006c2 <edges+0x330>
  edges[s][f] = 1;
     7ea:	90 93 23 04 	sts	0x0423, r25	; 0x800423 <edges+0x91>
     7ee:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <edges+0x90>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     7f2:	90 93 4b 08 	sts	0x084B, r25	; 0x80084b <edges+0x4b9>
     7f6:	80 93 4a 08 	sts	0x084A, r24	; 0x80084a <edges+0x4b8>
  edges[s][f] = 1;
     7fa:	90 93 2b 09 	sts	0x092B, r25	; 0x80092b <edges+0x599>
     7fe:	80 93 2a 09 	sts	0x092A, r24	; 0x80092a <edges+0x598>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     802:	90 93 29 07 	sts	0x0729, r25	; 0x800729 <edges+0x397>
     806:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <edges+0x396>
  edges[s][f] = 1;
     80a:	90 93 21 09 	sts	0x0921, r25	; 0x800921 <edges+0x58f>
     80e:	80 93 20 09 	sts	0x0920, r24	; 0x800920 <edges+0x58e>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     812:	90 93 35 09 	sts	0x0935, r25	; 0x800935 <edges+0x5a3>
     816:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <edges+0x5a2>
  edges[s][f] = 1;
     81a:	90 93 6d 09 	sts	0x096D, r25	; 0x80096d <edges+0x5db>
     81e:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <edges+0x5da>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     822:	90 93 71 09 	sts	0x0971, r25	; 0x800971 <edges+0x5df>
     826:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <edges+0x5de>
  edges[s][f] = 1;
     82a:	90 93 a9 09 	sts	0x09A9, r25	; 0x8009a9 <edges+0x617>
     82e:	80 93 a8 09 	sts	0x09A8, r24	; 0x8009a8 <edges+0x616>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     832:	90 93 ad 09 	sts	0x09AD, r25	; 0x8009ad <edges+0x61b>
     836:	80 93 ac 09 	sts	0x09AC, r24	; 0x8009ac <edges+0x61a>
  edges[s][f] = 1;
     83a:	90 93 e5 09 	sts	0x09E5, r25	; 0x8009e5 <edges+0x653>
     83e:	80 93 e4 09 	sts	0x09E4, r24	; 0x8009e4 <edges+0x652>
    }
  }
}
void add_edge(int f, int s)
{
  edges[f][s] = 1;
     842:	90 93 af 09 	sts	0x09AF, r25	; 0x8009af <edges+0x61d>
     846:	80 93 ae 09 	sts	0x09AE, r24	; 0x8009ae <edges+0x61c>
  edges[s][f] = 1;
     84a:	90 93 1f 0a 	sts	0x0A1F, r25	; 0x800a1f <edges+0x68d>
     84e:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <edges+0x68c>
     852:	08 95       	ret

00000854 <_Z6directii>:
  add_edge(  25, 26);
  add_edge(  26, 27);
  add_edge(  26, 28);//36
}
int direct(int prev, int current)
{
     854:	2f 92       	push	r2
     856:	3f 92       	push	r3
     858:	4f 92       	push	r4
     85a:	5f 92       	push	r5
     85c:	6f 92       	push	r6
     85e:	7f 92       	push	r7
     860:	8f 92       	push	r8
     862:	9f 92       	push	r9
     864:	af 92       	push	r10
     866:	bf 92       	push	r11
     868:	cf 92       	push	r12
     86a:	df 92       	push	r13
     86c:	ef 92       	push	r14
     86e:	ff 92       	push	r15
     870:	0f 93       	push	r16
     872:	1f 93       	push	r17
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	a0 91 60 0a 	lds	r26, 0x0A60	; 0x800a60 <current_y>
     87c:	b0 91 61 0a 	lds	r27, 0x0A61	; 0x800a61 <current_y+0x1>
     880:	60 90 62 0a 	lds	r6, 0x0A62	; 0x800a62 <current_x>
     884:	70 90 63 0a 	lds	r7, 0x0A63	; 0x800a63 <current_x+0x1>
     888:	c0 91 64 0a 	lds	r28, 0x0A64	; 0x800a64 <prev_y>
     88c:	d0 91 65 0a 	lds	r29, 0x0A65	; 0x800a65 <prev_y+0x1>
     890:	80 90 66 0a 	lds	r8, 0x0A66	; 0x800a66 <prev_x>
     894:	90 90 67 0a 	lds	r9, 0x0A67	; 0x800a67 <prev_x+0x1>
     898:	0f 2e       	mov	r0, r31
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	af 2e       	mov	r10, r31
     89e:	f2 e0       	ldi	r31, 0x02	; 2
     8a0:	bf 2e       	mov	r11, r31
     8a2:	f0 2d       	mov	r31, r0
  int cflag = 0, pflag = 0;
  //To find the x and y co ordinates of the direction from the matrix
  for (int p = 0; p < 8; p++) {
     8a4:	c1 2c       	mov	r12, r1
     8a6:	d1 2c       	mov	r13, r1
  add_edge(  26, 27);
  add_edge(  26, 28);//36
}
int direct(int prev, int current)
{
  int cflag = 0, pflag = 0;
     8a8:	e1 2c       	mov	r14, r1
     8aa:	f1 2c       	mov	r15, r1
     8ac:	00 e0       	ldi	r16, 0x00	; 0
     8ae:	10 e0       	ldi	r17, 0x00	; 0
     8b0:	44 24       	eor	r4, r4
     8b2:	43 94       	inc	r4
     8b4:	51 2c       	mov	r5, r1
     8b6:	f5 01       	movw	r30, r10
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
        cflag = 1;
        //cout << "found " << current << " at " << p << " " << m << "\n";
      }
      if (directionArray[p][m] == prev)
      {
        prev_y = p;
     8bc:	2c 2c       	mov	r2, r12
     8be:	3d 2c       	mov	r3, r13
  //To find the x and y co ordinates of the direction from the matrix
  for (int p = 0; p < 8; p++) {

    for (int m = 0; m < 21; m++)
    {
      if (directionArray[p][m] == current)
     8c0:	41 91       	ld	r20, Z+
     8c2:	51 91       	ld	r21, Z+
     8c4:	46 17       	cp	r20, r22
     8c6:	57 07       	cpc	r21, r23
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <_Z6directii+0x84>
        current_y = p;
        current_x = m;
        cflag = 1;
        //cout << "found " << current << " at " << p << " " << m << "\n";
      }
      if (directionArray[p][m] == prev)
     8ca:	68 17       	cp	r22, r24
     8cc:	79 07       	cpc	r23, r25
     8ce:	41 f0       	breq	.+16     	; 0x8e0 <_Z6directii+0x8c>
    for (int m = 0; m < 21; m++)
    {
      if (directionArray[p][m] == current)
      {
        current_y = p;
        current_x = m;
     8d0:	39 01       	movw	r6, r18

    for (int m = 0; m < 21; m++)
    {
      if (directionArray[p][m] == current)
      {
        current_y = p;
     8d2:	a2 2d       	mov	r26, r2
     8d4:	b3 2d       	mov	r27, r3
     8d6:	15 c0       	rjmp	.+42     	; 0x902 <_Z6directii+0xae>
        current_x = m;
        cflag = 1;
        //cout << "found " << current << " at " << p << " " << m << "\n";
      }
      if (directionArray[p][m] == prev)
     8d8:	48 17       	cp	r20, r24
     8da:	59 07       	cpc	r21, r25
     8dc:	79 f4       	brne	.+30     	; 0x8fc <_Z6directii+0xa8>
     8de:	05 c0       	rjmp	.+10     	; 0x8ea <_Z6directii+0x96>
    for (int m = 0; m < 21; m++)
    {
      if (directionArray[p][m] == current)
      {
        current_y = p;
        current_x = m;
     8e0:	39 01       	movw	r6, r18

    for (int m = 0; m < 21; m++)
    {
      if (directionArray[p][m] == current)
      {
        current_y = p;
     8e2:	a2 2d       	mov	r26, r2
     8e4:	b3 2d       	mov	r27, r3
        current_x = m;
        cflag = 1;
     8e6:	04 2d       	mov	r16, r4
     8e8:	15 2d       	mov	r17, r5
        prev_y = p;
        prev_x = m;
        pflag = 1;
        //cout << "found " << current << " at " << p << " " << m << "\n";
      }
      if ((cflag == 1) && (pflag == 1))
     8ea:	01 30       	cpi	r16, 0x01	; 1
     8ec:	11 05       	cpc	r17, r1
     8ee:	71 f0       	breq	.+28     	; 0x90c <_Z6directii+0xb8>
        //cout << "found " << current << " at " << p << " " << m << "\n";
      }
      if (directionArray[p][m] == prev)
      {
        prev_y = p;
        prev_x = m;
     8f0:	49 01       	movw	r8, r18
        cflag = 1;
        //cout << "found " << current << " at " << p << " " << m << "\n";
      }
      if (directionArray[p][m] == prev)
      {
        prev_y = p;
     8f2:	c2 2d       	mov	r28, r2
     8f4:	d3 2d       	mov	r29, r3
        prev_x = m;
        pflag = 1;
     8f6:	e4 2c       	mov	r14, r4
     8f8:	f5 2c       	mov	r15, r5
     8fa:	12 c0       	rjmp	.+36     	; 0x920 <_Z6directii+0xcc>
        //cout << "found " << current << " at " << p << " " << m << "\n";
      }
      if ((cflag == 1) && (pflag == 1))
     8fc:	01 30       	cpi	r16, 0x01	; 1
     8fe:	11 05       	cpc	r17, r1
     900:	79 f4       	brne	.+30     	; 0x920 <_Z6directii+0xcc>
     902:	41 e0       	ldi	r20, 0x01	; 1
     904:	e4 16       	cp	r14, r20
     906:	f1 04       	cpc	r15, r1
     908:	49 f4       	brne	.+18     	; 0x91c <_Z6directii+0xc8>
     90a:	02 c0       	rjmp	.+4      	; 0x910 <_Z6directii+0xbc>
        //cout << "found " << current << " at " << p << " " << m << "\n";
      }
      if (directionArray[p][m] == prev)
      {
        prev_y = p;
        prev_x = m;
     90c:	49 01       	movw	r8, r18
        cflag = 1;
        //cout << "found " << current << " at " << p << " " << m << "\n";
      }
      if (directionArray[p][m] == prev)
      {
        prev_y = p;
     90e:	e6 01       	movw	r28, r12
        prev_x = m;
        pflag = 1;
     910:	ee 24       	eor	r14, r14
     912:	e3 94       	inc	r14
     914:	f1 2c       	mov	r15, r1
     916:	01 e0       	ldi	r16, 0x01	; 1
     918:	10 e0       	ldi	r17, 0x00	; 0
     91a:	07 c0       	rjmp	.+14     	; 0x92a <_Z6directii+0xd6>
     91c:	04 2d       	mov	r16, r4
     91e:	15 2d       	mov	r17, r5
{
  int cflag = 0, pflag = 0;
  //To find the x and y co ordinates of the direction from the matrix
  for (int p = 0; p < 8; p++) {

    for (int m = 0; m < 21; m++)
     920:	2f 5f       	subi	r18, 0xFF	; 255
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	25 31       	cpi	r18, 0x15	; 21
     926:	31 05       	cpc	r19, r1
     928:	59 f6       	brne	.-106    	; 0x8c0 <_Z6directii+0x6c>
}
int direct(int prev, int current)
{
  int cflag = 0, pflag = 0;
  //To find the x and y co ordinates of the direction from the matrix
  for (int p = 0; p < 8; p++) {
     92a:	2f ef       	ldi	r18, 0xFF	; 255
     92c:	c2 1a       	sub	r12, r18
     92e:	d2 0a       	sbc	r13, r18
     930:	4a e2       	ldi	r20, 0x2A	; 42
     932:	a4 0e       	add	r10, r20
     934:	b1 1c       	adc	r11, r1
     936:	28 e0       	ldi	r18, 0x08	; 8
     938:	c2 16       	cp	r12, r18
     93a:	d1 04       	cpc	r13, r1
     93c:	09 f0       	breq	.+2      	; 0x940 <_Z6directii+0xec>
     93e:	bb cf       	rjmp	.-138    	; 0x8b6 <_Z6directii+0x62>
     940:	b0 93 61 0a 	sts	0x0A61, r27	; 0x800a61 <current_y+0x1>
     944:	a0 93 60 0a 	sts	0x0A60, r26	; 0x800a60 <current_y>
     948:	70 92 63 0a 	sts	0x0A63, r7	; 0x800a63 <current_x+0x1>
     94c:	60 92 62 0a 	sts	0x0A62, r6	; 0x800a62 <current_x>
     950:	d0 93 65 0a 	sts	0x0A65, r29	; 0x800a65 <prev_y+0x1>
     954:	c0 93 64 0a 	sts	0x0A64, r28	; 0x800a64 <prev_y>
     958:	90 92 67 0a 	sts	0x0A67, r9	; 0x800a67 <prev_x+0x1>
     95c:	80 92 66 0a 	sts	0x0A66, r8	; 0x800a66 <prev_x>
      }
    }
  }//location of the nodes are found
  //direction finder 1-north 5-south 3-east 7-west
  //Serial.println();
  if ((prev_x - current_x) > 0)//upward direction
     960:	c4 01       	movw	r24, r8
     962:	86 19       	sub	r24, r6
     964:	97 09       	sbc	r25, r7
     966:	18 16       	cp	r1, r24
     968:	19 06       	cpc	r1, r25
     96a:	6c f4       	brge	.+26     	; 0x986 <_Z6directii+0x132>
  {
    if (prev_y == current_y)
     96c:	ac 17       	cp	r26, r28
     96e:	bd 07       	cpc	r27, r29
     970:	71 f1       	breq	.+92     	; 0x9ce <_Z6directii+0x17a>
    { //Serial.print("West");
      return 7;
    }
    if ((prev_y - current_y) > 0)//left
     972:	ca 1b       	sub	r28, r26
     974:	db 0b       	sbc	r29, r27
     976:	1c 16       	cp	r1, r28
     978:	1d 06       	cpc	r1, r29
     97a:	64 f1       	brlt	.+88     	; 0x9d4 <_Z6directii+0x180>
    { //Serial.print("NW");
      return 8;
    }
    if ((prev_y - current_y) < 0)//right
     97c:	dd 23       	and	r29, r29
     97e:	6c f5       	brge	.+90     	; 0x9da <_Z6directii+0x186>
    { //Serial.print("NE");
      return 6;
     980:	86 e0       	ldi	r24, 0x06	; 6
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	3e c0       	rjmp	.+124    	; 0xa02 <_Z6directii+0x1ae>
    }
  }
  else if ((prev_x - current_x) < 0)//downward direction
     986:	99 23       	and	r25, r25
     988:	94 f4       	brge	.+36     	; 0x9ae <_Z6directii+0x15a>
  {
    if (prev_y == current_y)
     98a:	ac 17       	cp	r26, r28
     98c:	bd 07       	cpc	r27, r29
     98e:	41 f1       	breq	.+80     	; 0x9e0 <_Z6directii+0x18c>
    { //Serial.print("East");
      return 3;
    }
    if ((prev_y - current_y) > 0)//left
     990:	ca 1b       	sub	r28, r26
     992:	db 0b       	sbc	r29, r27
     994:	1c 16       	cp	r1, r28
     996:	1d 06       	cpc	r1, r29
     998:	34 f1       	brlt	.+76     	; 0x9e6 <_Z6directii+0x192>
    { //Serial.print("SW");
      return 2;
    }
    if ((prev_y - current_y) < 0)//right
    { //Serial.print("SE");
      return 4;
     99a:	8d 2f       	mov	r24, r29
     99c:	88 1f       	adc	r24, r24
     99e:	88 27       	eor	r24, r24
     9a0:	88 1f       	adc	r24, r24
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	88 0f       	add	r24, r24
     9a6:	99 1f       	adc	r25, r25
     9a8:	88 0f       	add	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	2a c0       	rjmp	.+84     	; 0xa02 <_Z6directii+0x1ae>
    }
  }
  else if (prev_x == current_x)
     9ae:	68 14       	cp	r6, r8
     9b0:	79 04       	cpc	r7, r9
     9b2:	e1 f4       	brne	.+56     	; 0x9ec <_Z6directii+0x198>
  {
    if (prev_y == current_y)
     9b4:	ac 17       	cp	r26, r28
     9b6:	bd 07       	cpc	r27, r29
     9b8:	e1 f0       	breq	.+56     	; 0x9f2 <_Z6directii+0x19e>
    { //Serial.print("same element at same place ..noiceee");
      return 0;
    }
    if ((prev_y - current_y) > 0)//left
     9ba:	ca 1b       	sub	r28, r26
     9bc:	db 0b       	sbc	r29, r27
     9be:	1c 16       	cp	r1, r28
     9c0:	1d 06       	cpc	r1, r29
     9c2:	d4 f0       	brlt	.+52     	; 0x9f8 <_Z6directii+0x1a4>
    { //Serial.print("North");
      return 1;
    }
    if ((prev_y - current_y) < 0)//right
     9c4:	dd 23       	and	r29, r29
     9c6:	dc f4       	brge	.+54     	; 0x9fe <_Z6directii+0x1aa>
    { //Serial.print("South");
      return 5;
     9c8:	85 e0       	ldi	r24, 0x05	; 5
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	1a c0       	rjmp	.+52     	; 0xa02 <_Z6directii+0x1ae>
  //Serial.println();
  if ((prev_x - current_x) > 0)//upward direction
  {
    if (prev_y == current_y)
    { //Serial.print("West");
      return 7;
     9ce:	87 e0       	ldi	r24, 0x07	; 7
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	17 c0       	rjmp	.+46     	; 0xa02 <_Z6directii+0x1ae>
    }
    if ((prev_y - current_y) > 0)//left
    { //Serial.print("NW");
      return 8;
     9d4:	88 e0       	ldi	r24, 0x08	; 8
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	14 c0       	rjmp	.+40     	; 0xa02 <_Z6directii+0x1ae>
    if ((prev_y - current_y) < 0)//right
    { //Serial.print("South");
      return 5;
    }
  }
  return 0;
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	11 c0       	rjmp	.+34     	; 0xa02 <_Z6directii+0x1ae>
  }
  else if ((prev_x - current_x) < 0)//downward direction
  {
    if (prev_y == current_y)
    { //Serial.print("East");
      return 3;
     9e0:	83 e0       	ldi	r24, 0x03	; 3
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <_Z6directii+0x1ae>
    }
    if ((prev_y - current_y) > 0)//left
    { //Serial.print("SW");
      return 2;
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0b c0       	rjmp	.+22     	; 0xa02 <_Z6directii+0x1ae>
    if ((prev_y - current_y) < 0)//right
    { //Serial.print("South");
      return 5;
    }
  }
  return 0;
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	08 c0       	rjmp	.+16     	; 0xa02 <_Z6directii+0x1ae>
  }
  else if (prev_x == current_x)
  {
    if (prev_y == current_y)
    { //Serial.print("same element at same place ..noiceee");
      return 0;
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	05 c0       	rjmp	.+10     	; 0xa02 <_Z6directii+0x1ae>
    }
    if ((prev_y - current_y) > 0)//left
    { //Serial.print("North");
      return 1;
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <_Z6directii+0x1ae>
    if ((prev_y - current_y) < 0)//right
    { //Serial.print("South");
      return 5;
    }
  }
  return 0;
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	90 e0       	ldi	r25, 0x00	; 0
}
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	1f 91       	pop	r17
     a08:	0f 91       	pop	r16
     a0a:	ff 90       	pop	r15
     a0c:	ef 90       	pop	r14
     a0e:	df 90       	pop	r13
     a10:	cf 90       	pop	r12
     a12:	bf 90       	pop	r11
     a14:	af 90       	pop	r10
     a16:	9f 90       	pop	r9
     a18:	8f 90       	pop	r8
     a1a:	7f 90       	pop	r7
     a1c:	6f 90       	pop	r6
     a1e:	5f 90       	pop	r5
     a20:	4f 90       	pop	r4
     a22:	3f 90       	pop	r3
     a24:	2f 90       	pop	r2
     a26:	08 95       	ret

00000a28 <_Z8traverseii>:
  //Serial.print("\n Current was ");
  //Serial.print(curr);
  //Serial.print(" Next is ");
  //Serial.print(next);
  //Serial.print(" Here the traversal will take place ");
  currDir = next;
     a28:	70 93 71 03 	sts	0x0371, r23	; 0x800371 <currDir+0x1>
     a2c:	60 93 70 03 	sts	0x0370, r22	; 0x800370 <currDir>
  int diff = 0;
  diff = next - curr;
     a30:	68 1b       	sub	r22, r24
     a32:	79 0b       	sbc	r23, r25
    1 - 2 = -1       N - NE
    1 - 3 = -2
    1 - 5 = -4
    1 - 6 = -5
  */
  if (diff > 4)
     a34:	65 30       	cpi	r22, 0x05	; 5
     a36:	71 05       	cpc	r23, r1
     a38:	4c f0       	brlt	.+18     	; 0xa4c <_Z8traverseii+0x24>
  {
    return ((diff - 8) * 45);
     a3a:	68 50       	subi	r22, 0x08	; 8
     a3c:	71 09       	sbc	r23, r1
     a3e:	2d e2       	ldi	r18, 0x2D	; 45
     a40:	26 9f       	mul	r18, r22
     a42:	c0 01       	movw	r24, r0
     a44:	27 9f       	mul	r18, r23
     a46:	90 0d       	add	r25, r0
     a48:	11 24       	eor	r1, r1
     a4a:	08 95       	ret
  }
  if (diff < (-4))
     a4c:	6c 3f       	cpi	r22, 0xFC	; 252
     a4e:	8f ef       	ldi	r24, 0xFF	; 255
     a50:	78 07       	cpc	r23, r24
     a52:	4c f4       	brge	.+18     	; 0xa66 <_Z8traverseii+0x3e>
  {
    return ((diff + 8) * 45);
     a54:	68 5f       	subi	r22, 0xF8	; 248
     a56:	7f 4f       	sbci	r23, 0xFF	; 255
     a58:	2d e2       	ldi	r18, 0x2D	; 45
     a5a:	26 9f       	mul	r18, r22
     a5c:	c0 01       	movw	r24, r0
     a5e:	27 9f       	mul	r18, r23
     a60:	90 0d       	add	r25, r0
     a62:	11 24       	eor	r1, r1
     a64:	08 95       	ret
  }
  else
  {
    return (diff * 45);
     a66:	2d e2       	ldi	r18, 0x2D	; 45
     a68:	26 9f       	mul	r18, r22
     a6a:	c0 01       	movw	r24, r0
     a6c:	27 9f       	mul	r18, r23
     a6e:	90 0d       	add	r25, r0
     a70:	11 24       	eor	r1, r1
  }
}
     a72:	08 95       	ret

00000a74 <_Z11MinDistancePiS_>:
  //else
    //Serial.print("There is no path between vertex ");
  //  << _s << "to vertex " << _d;
}
int MinDistance(int* dist, int* Blackened)
{
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	db 01       	movw	r26, r22
     a7a:	fc 01       	movw	r30, r24
  int min = inf, min_index, v;
  for (v = 0; v < n; v++)
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e0       	ldi	r19, 0x00	; 0
    //Serial.print("There is no path between vertex ");
  //  << _s << "to vertex " << _d;
}
int MinDistance(int* dist, int* Blackened)
{
  int min = inf, min_index, v;
     a80:	6f e0       	ldi	r22, 0x0F	; 15
     a82:	77 e2       	ldi	r23, 0x27	; 39
  for (v = 0; v < n; v++)
    if (!Blackened[v] && dist[v] < min) {
     a84:	4d 91       	ld	r20, X+
     a86:	5d 91       	ld	r21, X+
     a88:	45 2b       	or	r20, r21
     a8a:	41 f4       	brne	.+16     	; 0xa9c <_Z11MinDistancePiS_+0x28>
     a8c:	40 81       	ld	r20, Z
     a8e:	51 81       	ldd	r21, Z+1	; 0x01
     a90:	46 17       	cp	r20, r22
     a92:	57 07       	cpc	r21, r23
     a94:	1c f4       	brge	.+6      	; 0xa9c <_Z11MinDistancePiS_+0x28>
     a96:	d2 2f       	mov	r29, r18
     a98:	c3 2f       	mov	r28, r19
      min = dist[v];
     a9a:	ba 01       	movw	r22, r20
  //  << _s << "to vertex " << _d;
}
int MinDistance(int* dist, int* Blackened)
{
  int min = inf, min_index, v;
  for (v = 0; v < n; v++)
     a9c:	2f 5f       	subi	r18, 0xFF	; 255
     a9e:	3f 4f       	sbci	r19, 0xFF	; 255
     aa0:	32 96       	adiw	r30, 0x02	; 2
     aa2:	2d 31       	cpi	r18, 0x1D	; 29
     aa4:	31 05       	cpc	r19, r1
     aa6:	71 f7       	brne	.-36     	; 0xa84 <_Z11MinDistancePiS_+0x10>
    if (!Blackened[v] && dist[v] < min) {
      min = dist[v];
      min_index = v;
    }
  return min == inf ? inf : min_index;
     aa8:	6f 30       	cpi	r22, 0x0F	; 15
     aaa:	77 42       	sbci	r23, 0x27	; 39
     aac:	19 f0       	breq	.+6      	; 0xab4 <_Z11MinDistancePiS_+0x40>
     aae:	8d 2f       	mov	r24, r29
     ab0:	9c 2f       	mov	r25, r28
     ab2:	02 c0       	rjmp	.+4      	; 0xab8 <_Z11MinDistancePiS_+0x44>
     ab4:	8f e0       	ldi	r24, 0x0F	; 15
     ab6:	97 e2       	ldi	r25, 0x27	; 39
}
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <_Z9PrintPathPii>:
// Function to print the path
void PrintPath(int* parent, int _d)
{
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
  if (parent[_d] == NILL) {
     ac2:	fb 01       	movw	r30, r22
     ac4:	ee 0f       	add	r30, r30
     ac6:	ff 1f       	adc	r31, r31
     ac8:	e8 0f       	add	r30, r24
     aca:	f9 1f       	adc	r31, r25
     acc:	20 81       	ld	r18, Z
     ace:	31 81       	ldd	r19, Z+1	; 0x01
     ad0:	2f 3f       	cpi	r18, 0xFF	; 255
     ad2:	4f ef       	ldi	r20, 0xFF	; 255
     ad4:	34 07       	cpc	r19, r20
     ad6:	89 f4       	brne	.+34     	; 0xafa <_Z9PrintPathPii+0x3c>
    path[k] = _d;
     ad8:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <k>
     adc:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <k+0x1>
     ae0:	fc 01       	movw	r30, r24
     ae2:	ee 0f       	add	r30, r30
     ae4:	ff 1f       	adc	r31, r31
     ae6:	ec 5d       	subi	r30, 0xDC	; 220
     ae8:	f5 4f       	sbci	r31, 0xF5	; 245
     aea:	71 83       	std	Z+1, r23	; 0x01
     aec:	60 83       	st	Z, r22
    k++;
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <k+0x1>
     af4:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <k>
    return;
     af8:	13 c0       	rjmp	.+38     	; 0xb20 <_Z9PrintPathPii+0x62>
     afa:	eb 01       	movw	r28, r22
  }
  PrintPath(parent, parent[_d]);
     afc:	b9 01       	movw	r22, r18
     afe:	df df       	rcall	.-66     	; 0xabe <_Z9PrintPathPii>
  path[k] = _d;
     b00:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <k>
     b04:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <k+0x1>
     b08:	fc 01       	movw	r30, r24
     b0a:	ee 0f       	add	r30, r30
     b0c:	ff 1f       	adc	r31, r31
     b0e:	ec 5d       	subi	r30, 0xDC	; 220
     b10:	f5 4f       	sbci	r31, 0xF5	; 245
     b12:	d1 83       	std	Z+1, r29	; 0x01
     b14:	c0 83       	st	Z, r28
  k++;
     b16:	01 96       	adiw	r24, 0x01	; 1
     b18:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <k+0x1>
     b1c:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <k>
}
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	08 95       	ret

00000b26 <_Z8dijkstraiii>:
    return (diff * 45);
  }
}
//void dijkstra( int, int , int);
void dijkstra( int _n, int _s, int _d)
{
     b26:	2f 92       	push	r2
     b28:	3f 92       	push	r3
     b2a:	4f 92       	push	r4
     b2c:	5f 92       	push	r5
     b2e:	6f 92       	push	r6
     b30:	7f 92       	push	r7
     b32:	8f 92       	push	r8
     b34:	9f 92       	push	r9
     b36:	af 92       	push	r10
     b38:	bf 92       	push	r11
     b3a:	cf 92       	push	r12
     b3c:	df 92       	push	r13
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	cc 5e       	subi	r28, 0xEC	; 236
     b50:	d1 09       	sbc	r29, r1
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	cd bf       	out	0x3d, r28	; 61
     b5c:	c7 51       	subi	r28, 0x17	; 23
     b5e:	df 4f       	sbci	r29, 0xFF	; 255
     b60:	59 83       	std	Y+1, r21	; 0x01
     b62:	48 83       	st	Y, r20
     b64:	c9 5e       	subi	r28, 0xE9	; 233
     b66:	d0 40       	sbci	r29, 0x00	; 0
  int i, u, v, count;
  int dist[n];
  int Blackened[n] = { 0 };
     b68:	2a e3       	ldi	r18, 0x3A	; 58
     b6a:	de 01       	movw	r26, r28
     b6c:	db 96       	adiw	r26, 0x3b	; 59
     b6e:	fd 01       	movw	r30, r26
     b70:	32 2f       	mov	r19, r18
     b72:	11 92       	st	Z+, r1
     b74:	3a 95       	dec	r19
     b76:	e9 f7       	brne	.-6      	; 0xb72 <_Z8dijkstraiii+0x4c>
  int pathlength[n] = { 0 };
     b78:	ce 01       	movw	r24, r28
     b7a:	8b 58       	subi	r24, 0x8B	; 139
     b7c:	9f 4f       	sbci	r25, 0xFF	; 255
     b7e:	fc 01       	movw	r30, r24
     b80:	11 92       	st	Z+, r1
     b82:	2a 95       	dec	r18
     b84:	e9 f7       	brne	.-6      	; 0xb80 <_Z8dijkstraiii+0x5a>
  int parent[n];
  // The parent Of the source vertex is always equal to nill
  parent[_s] = NILL;
     b86:	fb 01       	movw	r30, r22
     b88:	ee 0f       	add	r30, r30
     b8a:	ff 1f       	adc	r31, r31
     b8c:	2f ea       	ldi	r18, 0xAF	; 175
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	2c 0f       	add	r18, r28
     b92:	3d 1f       	adc	r19, r29
     b94:	e2 0f       	add	r30, r18
     b96:	f3 1f       	adc	r31, r19
     b98:	2f ef       	ldi	r18, 0xFF	; 255
     b9a:	3f ef       	ldi	r19, 0xFF	; 255
     b9c:	31 83       	std	Z+1, r19	; 0x01
     b9e:	20 83       	st	Z, r18
     ba0:	cd 01       	movw	r24, r26
     ba2:	fe 01       	movw	r30, r28
     ba4:	31 96       	adiw	r30, 0x01	; 1
  // first, we initialize all distances to infinity.
  for (i = 0; i < n; i++)
    dist[i] = inf;
     ba6:	2f e0       	ldi	r18, 0x0F	; 15
     ba8:	37 e2       	ldi	r19, 0x27	; 39
     baa:	21 93       	st	Z+, r18
     bac:	31 93       	st	Z+, r19
  int pathlength[n] = { 0 };
  int parent[n];
  // The parent Of the source vertex is always equal to nill
  parent[_s] = NILL;
  // first, we initialize all distances to infinity.
  for (i = 0; i < n; i++)
     bae:	8e 17       	cp	r24, r30
     bb0:	9f 07       	cpc	r25, r31
     bb2:	d9 f7       	brne	.-10     	; 0xbaa <_Z8dijkstraiii+0x84>
    dist[i] = inf;
  dist[_s] = 0;
     bb4:	66 0f       	add	r22, r22
     bb6:	77 1f       	adc	r23, r23
     bb8:	fe 01       	movw	r30, r28
     bba:	e6 0f       	add	r30, r22
     bbc:	f7 1f       	adc	r31, r23
     bbe:	12 82       	std	Z+2, r1	; 0x02
     bc0:	11 82       	std	Z+1, r1	; 0x01
     bc2:	0f 2e       	mov	r0, r31
     bc4:	fc e1       	ldi	r31, 0x1C	; 28
     bc6:	4f 2e       	mov	r4, r31
     bc8:	51 2c       	mov	r5, r1
     bca:	f0 2d       	mov	r31, r0
    // is not a root
    if (u == inf)
      break;
    else {
      // Mark the vertex as Blackened
      Blackened[u] = 1;
     bcc:	22 24       	eor	r2, r2
     bce:	23 94       	inc	r2
     bd0:	31 2c       	mov	r3, r1
  // first, we initialize all distances to infinity.
  for (i = 0; i < n; i++)
    dist[i] = inf;
  dist[_s] = 0;
  for (count = 0; count < n - 1; count++) {
    u = MinDistance(dist, Blackened);
     bd2:	be 01       	movw	r22, r28
     bd4:	65 5c       	subi	r22, 0xC5	; 197
     bd6:	7f 4f       	sbci	r23, 0xFF	; 255
     bd8:	ce 01       	movw	r24, r28
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	4b df       	rcall	.-362    	; 0xa74 <_Z11MinDistancePiS_>
     bde:	4c 01       	movw	r8, r24
    // connected and we have traversed all of the vertices in the
    // connected component of the source vertex, so it can reduce
    // the time complexity sometimes
    // In a directed graph, it means that the source vertex
    // is not a root
    if (u == inf)
     be0:	8f 30       	cpi	r24, 0x0F	; 15
     be2:	37 e2       	ldi	r19, 0x27	; 39
     be4:	93 07       	cpc	r25, r19
     be6:	09 f4       	brne	.+2      	; 0xbea <_Z8dijkstraiii+0xc4>
     be8:	8c c0       	rjmp	.+280    	; 0xd02 <_Z8dijkstraiii+0x1dc>
      break;
    else {
      // Mark the vertex as Blackened
      Blackened[u] = 1;
     bea:	fc 01       	movw	r30, r24
     bec:	ee 0f       	add	r30, r30
     bee:	ff 1f       	adc	r31, r31
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	8c 0f       	add	r24, r28
     bf6:	9d 1f       	adc	r25, r29
     bf8:	e8 0f       	add	r30, r24
     bfa:	f9 1f       	adc	r31, r25
     bfc:	33 ae       	std	Z+59, r3	; 0x3b
     bfe:	22 ae       	std	Z+58, r2	; 0x3a
     c00:	be 01       	movw	r22, r28
     c02:	65 5c       	subi	r22, 0xC5	; 197
     c04:	7f 4f       	sbci	r23, 0xFF	; 255
     c06:	fe 01       	movw	r30, r28
     c08:	e1 55       	subi	r30, 0x51	; 81
     c0a:	ff 4f       	sbci	r31, 0xFF	; 255
     c0c:	ae 01       	movw	r20, r28
     c0e:	4b 58       	subi	r20, 0x8B	; 139
     c10:	5f 4f       	sbci	r21, 0xFF	; 255
     c12:	aa e3       	ldi	r26, 0x3A	; 58
     c14:	a8 9d       	mul	r26, r8
     c16:	c0 01       	movw	r24, r0
     c18:	a9 9d       	mul	r26, r9
     c1a:	90 0d       	add	r25, r0
     c1c:	11 24       	eor	r1, r1
     c1e:	8e 56       	subi	r24, 0x6E	; 110
     c20:	9c 4f       	sbci	r25, 0xFC	; 252
     c22:	6f 01       	movw	r12, r30
     c24:	ba e3       	ldi	r27, 0x3A	; 58
     c26:	cb 0e       	add	r12, r27
     c28:	d1 1c       	adc	r13, r1
     c2a:	de 01       	movw	r26, r28
     c2c:	11 96       	adiw	r26, 0x01	; 1
      for (v = 0; v < n; v++) {
        if (!Blackened[v] && edges[u][v]
            && dist[u] + edges[u][v] < dist[v]) {
     c2e:	94 01       	movw	r18, r8
     c30:	22 0f       	add	r18, r18
     c32:	33 1f       	adc	r19, r19
     c34:	5d 01       	movw	r10, r26
     c36:	a2 0e       	add	r10, r18
     c38:	b3 1e       	adc	r11, r19
          pathlength[v] = pathlength[parent[v]] + 1;
          dist[v] = dist[u] + edges[u][v];
        }
        else if (!Blackened[v] && edges[u][v]
                 && dist[u] + edges[u][v] == dist[v]
                 && pathlength[u] + 1 < pathlength[v]) {
     c3a:	3a 01       	movw	r6, r20
     c3c:	62 0e       	add	r6, r18
     c3e:	73 1e       	adc	r7, r19
     c40:	c5 51       	subi	r28, 0x15	; 21
     c42:	df 4f       	sbci	r29, 0xFF	; 255
     c44:	b9 83       	std	Y+1, r27	; 0x01
     c46:	a8 83       	st	Y, r26
     c48:	cb 5e       	subi	r28, 0xEB	; 235
     c4a:	d0 40       	sbci	r29, 0x00	; 0
      break;
    else {
      // Mark the vertex as Blackened
      Blackened[u] = 1;
      for (v = 0; v < n; v++) {
        if (!Blackened[v] && edges[u][v]
     c4c:	db 01       	movw	r26, r22
     c4e:	2d 91       	ld	r18, X+
     c50:	3d 91       	ld	r19, X+
     c52:	bd 01       	movw	r22, r26
     c54:	23 2b       	or	r18, r19
     c56:	d1 f5       	brne	.+116    	; 0xccc <_Z8dijkstraiii+0x1a6>
     c58:	dc 01       	movw	r26, r24
     c5a:	2d 91       	ld	r18, X+
     c5c:	3c 91       	ld	r19, X
     c5e:	21 15       	cp	r18, r1
     c60:	31 05       	cpc	r19, r1
     c62:	a1 f1       	breq	.+104    	; 0xccc <_Z8dijkstraiii+0x1a6>
            && dist[u] + edges[u][v] < dist[v]) {
     c64:	d5 01       	movw	r26, r10
     c66:	ed 90       	ld	r14, X+
     c68:	fc 90       	ld	r15, X
     c6a:	e2 0e       	add	r14, r18
     c6c:	f3 1e       	adc	r15, r19
     c6e:	c5 51       	subi	r28, 0x15	; 21
     c70:	df 4f       	sbci	r29, 0xFF	; 255
     c72:	a8 81       	ld	r26, Y
     c74:	b9 81       	ldd	r27, Y+1	; 0x01
     c76:	cb 5e       	subi	r28, 0xEB	; 235
     c78:	d0 40       	sbci	r29, 0x00	; 0
     c7a:	0d 91       	ld	r16, X+
     c7c:	1c 91       	ld	r17, X
     c7e:	e0 16       	cp	r14, r16
     c80:	f1 06       	cpc	r15, r17
     c82:	0c f0       	brlt	.+2      	; 0xc86 <_Z8dijkstraiii+0x160>
     c84:	5c c0       	rjmp	.+184    	; 0xd3e <_Z8dijkstraiii+0x218>
          parent[v] = u;
     c86:	91 82       	std	Z+1, r9	; 0x01
     c88:	80 82       	st	Z, r8
          pathlength[v] = pathlength[parent[v]] + 1;
     c8a:	d3 01       	movw	r26, r6
     c8c:	2d 91       	ld	r18, X+
     c8e:	3c 91       	ld	r19, X
     c90:	2f 5f       	subi	r18, 0xFF	; 255
     c92:	3f 4f       	sbci	r19, 0xFF	; 255
     c94:	da 01       	movw	r26, r20
     c96:	2d 93       	st	X+, r18
     c98:	3c 93       	st	X, r19
          dist[v] = dist[u] + edges[u][v];
     c9a:	c5 51       	subi	r28, 0x15	; 21
     c9c:	df 4f       	sbci	r29, 0xFF	; 255
     c9e:	a8 81       	ld	r26, Y
     ca0:	b9 81       	ldd	r27, Y+1	; 0x01
     ca2:	cb 5e       	subi	r28, 0xEB	; 235
     ca4:	d0 40       	sbci	r29, 0x00	; 0
     ca6:	ed 92       	st	X+, r14
     ca8:	fc 92       	st	X, r15
     caa:	10 c0       	rjmp	.+32     	; 0xccc <_Z8dijkstraiii+0x1a6>
        }
        else if (!Blackened[v] && edges[u][v]
                 && dist[u] + edges[u][v] == dist[v]
                 && pathlength[u] + 1 < pathlength[v]) {
     cac:	d3 01       	movw	r26, r6
     cae:	2d 91       	ld	r18, X+
     cb0:	3c 91       	ld	r19, X
     cb2:	2f 5f       	subi	r18, 0xFF	; 255
     cb4:	3f 4f       	sbci	r19, 0xFF	; 255
     cb6:	da 01       	movw	r26, r20
     cb8:	0d 91       	ld	r16, X+
     cba:	1c 91       	ld	r17, X
     cbc:	11 97       	sbiw	r26, 0x01	; 1
     cbe:	20 17       	cp	r18, r16
     cc0:	31 07       	cpc	r19, r17
     cc2:	24 f4       	brge	.+8      	; 0xccc <_Z8dijkstraiii+0x1a6>
          parent[v] = u;
     cc4:	91 82       	std	Z+1, r9	; 0x01
     cc6:	80 82       	st	Z, r8
          pathlength[v] = pathlength[u] + 1;
     cc8:	2d 93       	st	X+, r18
     cca:	3c 93       	st	X, r19
     ccc:	32 96       	adiw	r30, 0x02	; 2
     cce:	4e 5f       	subi	r20, 0xFE	; 254
     cd0:	5f 4f       	sbci	r21, 0xFF	; 255
     cd2:	c5 51       	subi	r28, 0x15	; 21
     cd4:	df 4f       	sbci	r29, 0xFF	; 255
     cd6:	28 81       	ld	r18, Y
     cd8:	39 81       	ldd	r19, Y+1	; 0x01
     cda:	cb 5e       	subi	r28, 0xEB	; 235
     cdc:	d0 40       	sbci	r29, 0x00	; 0
     cde:	2e 5f       	subi	r18, 0xFE	; 254
     ce0:	3f 4f       	sbci	r19, 0xFF	; 255
     ce2:	c5 51       	subi	r28, 0x15	; 21
     ce4:	df 4f       	sbci	r29, 0xFF	; 255
     ce6:	39 83       	std	Y+1, r19	; 0x01
     ce8:	28 83       	st	Y, r18
     cea:	cb 5e       	subi	r28, 0xEB	; 235
     cec:	d0 40       	sbci	r29, 0x00	; 0
     cee:	02 96       	adiw	r24, 0x02	; 2
    if (u == inf)
      break;
    else {
      // Mark the vertex as Blackened
      Blackened[u] = 1;
      for (v = 0; v < n; v++) {
     cf0:	ec 15       	cp	r30, r12
     cf2:	fd 05       	cpc	r31, r13
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <_Z8dijkstraiii+0x1d2>
     cf6:	aa cf       	rjmp	.-172    	; 0xc4c <_Z8dijkstraiii+0x126>
     cf8:	31 e0       	ldi	r19, 0x01	; 1
     cfa:	43 1a       	sub	r4, r19
     cfc:	51 08       	sbc	r5, r1
  parent[_s] = NILL;
  // first, we initialize all distances to infinity.
  for (i = 0; i < n; i++)
    dist[i] = inf;
  dist[_s] = 0;
  for (count = 0; count < n - 1; count++) {
     cfe:	09 f0       	breq	.+2      	; 0xd02 <_Z8dijkstraiii+0x1dc>
     d00:	68 cf       	rjmp	.-304    	; 0xbd2 <_Z8dijkstraiii+0xac>
        }
      }
    }
  }
  // Printing the path
  if (dist[_d] != inf)
     d02:	c7 51       	subi	r28, 0x17	; 23
     d04:	df 4f       	sbci	r29, 0xFF	; 255
     d06:	e8 81       	ld	r30, Y
     d08:	f9 81       	ldd	r31, Y+1	; 0x01
     d0a:	c9 5e       	subi	r28, 0xE9	; 233
     d0c:	d0 40       	sbci	r29, 0x00	; 0
     d0e:	ee 0f       	add	r30, r30
     d10:	ff 1f       	adc	r31, r31
     d12:	ec 0f       	add	r30, r28
     d14:	fd 1f       	adc	r31, r29
     d16:	81 81       	ldd	r24, Z+1	; 0x01
     d18:	92 81       	ldd	r25, Z+2	; 0x02
     d1a:	8f 30       	cpi	r24, 0x0F	; 15
     d1c:	97 42       	sbci	r25, 0x27	; 39
     d1e:	09 f1       	breq	.+66     	; 0xd62 <_Z8dijkstraiii+0x23c>
  {
    k = 0;
     d20:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <k+0x1>
     d24:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <k>
    PrintPath(parent, _d);
     d28:	c7 51       	subi	r28, 0x17	; 23
     d2a:	df 4f       	sbci	r29, 0xFF	; 255
     d2c:	68 81       	ld	r22, Y
     d2e:	79 81       	ldd	r23, Y+1	; 0x01
     d30:	c9 5e       	subi	r28, 0xE9	; 233
     d32:	d0 40       	sbci	r29, 0x00	; 0
     d34:	ce 01       	movw	r24, r28
     d36:	81 55       	subi	r24, 0x51	; 81
     d38:	9f 4f       	sbci	r25, 0xFF	; 255
     d3a:	c1 de       	rcall	.-638    	; 0xabe <_Z9PrintPathPii>
  }
  //else
    //Serial.print("There is no path between vertex ");
  //  << _s << "to vertex " << _d;
}
     d3c:	12 c0       	rjmp	.+36     	; 0xd62 <_Z8dijkstraiii+0x23c>
          parent[v] = u;
          pathlength[v] = pathlength[parent[v]] + 1;
          dist[v] = dist[u] + edges[u][v];
        }
        else if (!Blackened[v] && edges[u][v]
                 && dist[u] + edges[u][v] == dist[v]
     d3e:	d5 01       	movw	r26, r10
     d40:	0d 91       	ld	r16, X+
     d42:	1c 91       	ld	r17, X
     d44:	20 0f       	add	r18, r16
     d46:	31 1f       	adc	r19, r17
     d48:	c5 51       	subi	r28, 0x15	; 21
     d4a:	df 4f       	sbci	r29, 0xFF	; 255
     d4c:	a8 81       	ld	r26, Y
     d4e:	b9 81       	ldd	r27, Y+1	; 0x01
     d50:	cb 5e       	subi	r28, 0xEB	; 235
     d52:	d0 40       	sbci	r29, 0x00	; 0
     d54:	0d 91       	ld	r16, X+
     d56:	1c 91       	ld	r17, X
     d58:	20 17       	cp	r18, r16
     d5a:	31 07       	cpc	r19, r17
     d5c:	09 f0       	breq	.+2      	; 0xd60 <_Z8dijkstraiii+0x23a>
     d5e:	b6 cf       	rjmp	.-148    	; 0xccc <_Z8dijkstraiii+0x1a6>
     d60:	a5 cf       	rjmp	.-182    	; 0xcac <_Z8dijkstraiii+0x186>
    PrintPath(parent, _d);
  }
  //else
    //Serial.print("There is no path between vertex ");
  //  << _s << "to vertex " << _d;
}
     d62:	c4 51       	subi	r28, 0x14	; 20
     d64:	df 4f       	sbci	r29, 0xFF	; 255
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	cd bf       	out	0x3d, r28	; 61
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	ff 90       	pop	r15
     d7a:	ef 90       	pop	r14
     d7c:	df 90       	pop	r13
     d7e:	cf 90       	pop	r12
     d80:	bf 90       	pop	r11
     d82:	af 90       	pop	r10
     d84:	9f 90       	pop	r9
     d86:	8f 90       	pop	r8
     d88:	7f 90       	pop	r7
     d8a:	6f 90       	pop	r6
     d8c:	5f 90       	pop	r5
     d8e:	4f 90       	pop	r4
     d90:	3f 90       	pop	r3
     d92:	2f 90       	pop	r2
     d94:	08 95       	ret

00000d96 <_Z8obstacleiii>:
/*
  to delete the edge if obstacle is there
*/
void rem_edge(int f, int s)
{
  edges[f][s] = 0;
     d96:	2d e1       	ldi	r18, 0x1D	; 29
     d98:	28 9f       	mul	r18, r24
     d9a:	f0 01       	movw	r30, r0
     d9c:	29 9f       	mul	r18, r25
     d9e:	f0 0d       	add	r31, r0
     da0:	11 24       	eor	r1, r1
     da2:	e6 0f       	add	r30, r22
     da4:	f7 1f       	adc	r31, r23
     da6:	ee 0f       	add	r30, r30
     da8:	ff 1f       	adc	r31, r31
     daa:	ee 56       	subi	r30, 0x6E	; 110
     dac:	fc 4f       	sbci	r31, 0xFC	; 252
     dae:	11 82       	std	Z+1, r1	; 0x01
     db0:	10 82       	st	Z, r1
  edges[s][f] = 0;
     db2:	26 9f       	mul	r18, r22
     db4:	f0 01       	movw	r30, r0
     db6:	27 9f       	mul	r18, r23
     db8:	f0 0d       	add	r31, r0
     dba:	11 24       	eor	r1, r1
     dbc:	e8 0f       	add	r30, r24
     dbe:	f9 1f       	adc	r31, r25
     dc0:	ee 0f       	add	r30, r30
     dc2:	ff 1f       	adc	r31, r31
     dc4:	ee 56       	subi	r30, 0x6E	; 110
     dc6:	fc 4f       	sbci	r31, 0xFC	; 252
     dc8:	11 82       	std	Z+1, r1	; 0x01
     dca:	10 82       	st	Z, r1
  //Serial.print(prev);
  //Serial.print(" ");
  //Serial.println(next);
  rem_edge(prev, next);
  //reverse to previous node
  dijkstra(n, prev, last);
     dcc:	40 91 8e 03 	lds	r20, 0x038E	; 0x80038e <last>
     dd0:	50 91 8f 03 	lds	r21, 0x038F	; 0x80038f <last+0x1>
     dd4:	bc 01       	movw	r22, r24
     dd6:	8d e1       	ldi	r24, 0x1D	; 29
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	a5 ce       	rjmp	.-694    	; 0xb26 <_Z8dijkstraiii>
     ddc:	08 95       	ret

00000dde <_Z4runsv>:
  path[k] = _d;
  k++;
}

void runs()
{ int newDir;
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
  int angle;
  angle = 0;

  for (int i = 0; i < k-1 ; i++)
     de2:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <k>
     de6:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <k+0x1>
     dea:	01 97       	sbiw	r24, 0x01	; 1
     dec:	18 16       	cp	r1, r24
     dee:	19 06       	cpc	r1, r25
     df0:	0c f0       	brlt	.+2      	; 0xdf4 <_Z4runsv+0x16>
     df2:	77 c0       	rjmp	.+238    	; 0xee2 <_Z4runsv+0x104>
     df4:	c0 e0       	ldi	r28, 0x00	; 0
     df6:	d0 e0       	ldi	r29, 0x00	; 0
  { //Serial.print("\n At Node ");
    //Serial.println(path[i]);

    if (path[i] == 2 && path[i + 1] == 3)
     df8:	fe 01       	movw	r30, r28
     dfa:	ee 0f       	add	r30, r30
     dfc:	ff 1f       	adc	r31, r31
     dfe:	ec 5d       	subi	r30, 0xDC	; 220
     e00:	f5 4f       	sbci	r31, 0xF5	; 245
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	82 30       	cpi	r24, 0x02	; 2
     e08:	91 05       	cpc	r25, r1
     e0a:	a1 f4       	brne	.+40     	; 0xe34 <_Z4runsv+0x56>
     e0c:	fe 01       	movw	r30, r28
     e0e:	ee 0f       	add	r30, r30
     e10:	ff 1f       	adc	r31, r31
     e12:	ea 5d       	subi	r30, 0xDA	; 218
     e14:	f5 4f       	sbci	r31, 0xF5	; 245
     e16:	20 81       	ld	r18, Z
     e18:	31 81       	ldd	r19, Z+1	; 0x01
     e1a:	23 30       	cpi	r18, 0x03	; 3
     e1c:	31 05       	cpc	r19, r1
     e1e:	c1 f5       	brne	.+112    	; 0xe90 <_Z4runsv+0xb2>
    {
      obstacle(path[i], path[i + 1], 1);
     e20:	41 e0       	ldi	r20, 0x01	; 1
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	63 e0       	ldi	r22, 0x03	; 3
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	82 e0       	ldi	r24, 0x02	; 2
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	b4 df       	rcall	.-152    	; 0xd96 <_Z8obstacleiii>
      i = -1;
     e2e:	cf ef       	ldi	r28, 0xFF	; 255
     e30:	df ef       	ldi	r29, 0xFF	; 255
      continue;
     e32:	4d c0       	rjmp	.+154    	; 0xece <_Z4runsv+0xf0>
    }

    if (path[i] == 17 && path[i + 1] == 11)
     e34:	81 31       	cpi	r24, 0x11	; 17
     e36:	91 05       	cpc	r25, r1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <_Z4runsv+0x84>
     e3a:	fe 01       	movw	r30, r28
     e3c:	ee 0f       	add	r30, r30
     e3e:	ff 1f       	adc	r31, r31
     e40:	ea 5d       	subi	r30, 0xDA	; 218
     e42:	f5 4f       	sbci	r31, 0xF5	; 245
     e44:	20 81       	ld	r18, Z
     e46:	31 81       	ldd	r19, Z+1	; 0x01
     e48:	2b 30       	cpi	r18, 0x0B	; 11
     e4a:	31 05       	cpc	r19, r1
     e4c:	09 f5       	brne	.+66     	; 0xe90 <_Z4runsv+0xb2>
    {
      obstacle(path[i], path[i + 1], 1);
     e4e:	41 e0       	ldi	r20, 0x01	; 1
     e50:	50 e0       	ldi	r21, 0x00	; 0
     e52:	6b e0       	ldi	r22, 0x0B	; 11
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	81 e1       	ldi	r24, 0x11	; 17
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	9d df       	rcall	.-198    	; 0xd96 <_Z8obstacleiii>
      i = -1;
     e5c:	cf ef       	ldi	r28, 0xFF	; 255
     e5e:	df ef       	ldi	r29, 0xFF	; 255
      continue;
     e60:	36 c0       	rjmp	.+108    	; 0xece <_Z4runsv+0xf0>
    }

    if (path[i] == 12 && path[i + 1] == 21)
     e62:	8c 30       	cpi	r24, 0x0C	; 12
     e64:	91 05       	cpc	r25, r1
     e66:	a1 f4       	brne	.+40     	; 0xe90 <_Z4runsv+0xb2>
     e68:	fe 01       	movw	r30, r28
     e6a:	ee 0f       	add	r30, r30
     e6c:	ff 1f       	adc	r31, r31
     e6e:	ea 5d       	subi	r30, 0xDA	; 218
     e70:	f5 4f       	sbci	r31, 0xF5	; 245
     e72:	20 81       	ld	r18, Z
     e74:	31 81       	ldd	r19, Z+1	; 0x01
     e76:	25 31       	cpi	r18, 0x15	; 21
     e78:	31 05       	cpc	r19, r1
     e7a:	51 f4       	brne	.+20     	; 0xe90 <_Z4runsv+0xb2>
    {
      obstacle(path[i], path[i + 1], 1);
     e7c:	41 e0       	ldi	r20, 0x01	; 1
     e7e:	50 e0       	ldi	r21, 0x00	; 0
     e80:	65 e1       	ldi	r22, 0x15	; 21
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	8c e0       	ldi	r24, 0x0C	; 12
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	86 df       	rcall	.-244    	; 0xd96 <_Z8obstacleiii>
      i = -1;
     e8a:	cf ef       	ldi	r28, 0xFF	; 255
     e8c:	df ef       	ldi	r29, 0xFF	; 255
      continue;
     e8e:	1f c0       	rjmp	.+62     	; 0xece <_Z4runsv+0xf0>
    }
    newDir = direct(path[i], path[i + 1]);
     e90:	fe 01       	movw	r30, r28
     e92:	ee 0f       	add	r30, r30
     e94:	ff 1f       	adc	r31, r31
     e96:	ea 5d       	subi	r30, 0xDA	; 218
     e98:	f5 4f       	sbci	r31, 0xF5	; 245
     e9a:	60 81       	ld	r22, Z
     e9c:	71 81       	ldd	r23, Z+1	; 0x01
     e9e:	da dc       	rcall	.-1612   	; 0x854 <_Z6directii>
    angle = traverse(currDir, newDir);
     ea0:	bc 01       	movw	r22, r24
     ea2:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <currDir>
     ea6:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <currDir+0x1>
	if (angle == 0)
     eaa:	be dd       	rcall	.-1156   	; 0xa28 <_Z8traverseii>
     eac:	00 97       	sbiw	r24, 0x00	; 0
	{
		forward_by_node(1);
     eae:	19 f4       	brne	.+6      	; 0xeb6 <_Z4runsv+0xd8>
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	0e db       	rcall	.-2532   	; 0x4d0 <_Z15forward_by_nodeh>
	}
	else if (angle > 0)
     eb4:	0c c0       	rjmp	.+24     	; 0xece <_Z4runsv+0xf0>
     eb6:	18 16       	cp	r1, r24
     eb8:	19 06       	cpc	r1, r25
	{
		right_mudja();
     eba:	24 f4       	brge	.+8      	; 0xec4 <_Z4runsv+0xe6>
		forward_by_node(1);
     ebc:	6a da       	rcall	.-2860   	; 0x392 <_Z11right_mudjav>
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	07 db       	rcall	.-2546   	; 0x4d0 <_Z15forward_by_nodeh>
	}
	else if (angle < 0)
     ec2:	05 c0       	rjmp	.+10     	; 0xece <_Z4runsv+0xf0>
     ec4:	99 23       	and	r25, r25
	{
		left_mudja();
     ec6:	1c f4       	brge	.+6      	; 0xece <_Z4runsv+0xf0>
     ec8:	84 da       	rcall	.-2808   	; 0x3d2 <_Z10left_mudjav>
		forward_by_node(1);
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	01 db       	rcall	.-2558   	; 0x4d0 <_Z15forward_by_nodeh>
     ece:	21 96       	adiw	r28, 0x01	; 1
void runs()
{ int newDir;
  int angle;
  angle = 0;

  for (int i = 0; i < k-1 ; i++)
     ed0:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <k>
     ed4:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <k+0x1>
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	c8 17       	cp	r28, r24
     edc:	d9 07       	cpc	r29, r25
     ede:	0c f4       	brge	.+2      	; 0xee2 <_Z4runsv+0x104>
     ee0:	8b cf       	rjmp	.-234    	; 0xdf8 <_Z4runsv+0x1a>
     ee2:	df 91       	pop	r29
		forward_by_node(1);
	}
    //Serial.print("Angle ");
    //Serial.print(angle);
  }
}
     ee4:	cf 91       	pop	r28
     ee6:	08 95       	ret

00000ee8 <_Z6colorsi>:
     ee8:	81 30       	cpi	r24, 0x01	; 1
  print(path, n);
}

  void colors(int color)
  {
if(color==1){
     eea:	91 05       	cpc	r25, r1
     eec:	99 f4       	brne	.+38     	; 0xf14 <_Z6colorsi+0x2c>
  sec=1;       
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <__data_end+0x1>
     ef6:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <__data_end>
  if(rd==2)
     efa:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <rd>
     efe:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <rd+0x1>
     f02:	02 97       	sbiw	r24, 0x02	; 2
     f04:	09 f5       	brne	.+66     	; 0xf48 <_Z6colorsi+0x60>
  sec=3;
     f06:	83 e0       	ldi	r24, 0x03	; 3
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <__data_end+0x1>
     f0e:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <__data_end>
     f12:	49 c0       	rjmp	.+146    	; 0xfa6 <_Z6colorsi+0xbe>
  }
else if(color==2){
     f14:	82 30       	cpi	r24, 0x02	; 2
     f16:	91 05       	cpc	r25, r1
     f18:	39 f4       	brne	.+14     	; 0xf28 <_Z6colorsi+0x40>
  sec=2;         
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <__data_end+0x1>
     f22:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <__data_end>
     f26:	28 c0       	rjmp	.+80     	; 0xf78 <_Z6colorsi+0x90>
  }
else if(color==3){
     f28:	03 97       	sbiw	r24, 0x03	; 3
     f2a:	39 f4       	brne	.+14     	; 0xf3a <_Z6colorsi+0x52>
  sec=3; 
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <__data_end+0x1>
     f34:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <__data_end>
     f38:	36 c0       	rjmp	.+108    	; 0xfa6 <_Z6colorsi+0xbe>
 }
    
      if (sec == 1)
     f3a:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <__data_end>
     f3e:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <__data_end+0x1>
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	91 05       	cpc	r25, r1
     f46:	a9 f4       	brne	.+42     	; 0xf72 <_Z6colorsi+0x8a>
      {
        drop1 = rdrop[rd];
     f48:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <rd>
     f4c:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <rd+0x1>
     f50:	fc 01       	movw	r30, r24
     f52:	ee 0f       	add	r30, r30
     f54:	ff 1f       	adc	r31, r31
     f56:	e8 5a       	subi	r30, 0xA8	; 168
     f58:	fc 4f       	sbci	r31, 0xFC	; 252
     f5a:	20 81       	ld	r18, Z
     f5c:	31 81       	ldd	r19, Z+1	; 0x01
     f5e:	30 93 83 03 	sts	0x0383, r19	; 0x800383 <drop1+0x1>
     f62:	20 93 82 03 	sts	0x0382, r18	; 0x800382 <drop1>
        rd++;
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <rd+0x1>
     f6c:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <rd>
     f70:	08 95       	ret
        ////Serial.println(drop1);
      }
      else if (sec == 2)
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	91 05       	cpc	r25, r1
     f76:	a9 f4       	brne	.+42     	; 0xfa2 <_Z6colorsi+0xba>
      {
        drop1 = gdrop[gd];
     f78:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <gd>
     f7c:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <gd+0x1>
     f80:	fc 01       	movw	r30, r24
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	ec 5a       	subi	r30, 0xAC	; 172
     f88:	fc 4f       	sbci	r31, 0xFC	; 252
     f8a:	20 81       	ld	r18, Z
     f8c:	31 81       	ldd	r19, Z+1	; 0x01
     f8e:	30 93 83 03 	sts	0x0383, r19	; 0x800383 <drop1+0x1>
     f92:	20 93 82 03 	sts	0x0382, r18	; 0x800382 <drop1>
        gd++;
     f96:	01 96       	adiw	r24, 0x01	; 1
     f98:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <gd+0x1>
     f9c:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <gd>
     fa0:	08 95       	ret
      //  //Serial.println(drop1);
        if(gd==2)
            color++;
      }
      else if (sec == 3)
     fa2:	03 97       	sbiw	r24, 0x03	; 3
     fa4:	a1 f4       	brne	.+40     	; 0xfce <_Z6colorsi+0xe6>
      {
        drop1 = bdrop[bd];
     fa6:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <bd>
     faa:	90 91 87 03 	lds	r25, 0x0387	; 0x800387 <bd+0x1>
     fae:	fc 01       	movw	r30, r24
     fb0:	ee 0f       	add	r30, r30
     fb2:	ff 1f       	adc	r31, r31
     fb4:	e0 5b       	subi	r30, 0xB0	; 176
     fb6:	fc 4f       	sbci	r31, 0xFC	; 252
     fb8:	20 81       	ld	r18, Z
     fba:	31 81       	ldd	r19, Z+1	; 0x01
     fbc:	30 93 83 03 	sts	0x0383, r19	; 0x800383 <drop1+0x1>
     fc0:	20 93 82 03 	sts	0x0382, r18	; 0x800382 <drop1>
        bd++;
     fc4:	01 96       	adiw	r24, 0x01	; 1
     fc6:	90 93 87 03 	sts	0x0387, r25	; 0x800387 <bd+0x1>
     fca:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <bd>
     fce:	08 95       	ret

00000fd0 <main>:
       // //Serial.println(drop1);
        
      }
    }
	
int main() {
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	2c 97       	sbiw	r28, 0x0c	; 12
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
	init_devices();
     fe4:	02 db       	rcall	.-2556   	; 0x5ea <_Z12init_devicesv>
  reinit(n);//empty the whole setup
     fe6:	8d e1       	ldi	r24, 0x1D	; 29
     fe8:	90 e0       	ldi	r25, 0x00	; 0
  //printmat(edges,n);//blank matrix is there
  createGraph();//create the graph
     fea:	03 db       	rcall	.-2554   	; 0x5f2 <_Z6reiniti>
     fec:	20 db       	rcall	.-2496   	; 0x62e <_Z11createGraphv>
  //printmat(edges,n);//print the new matrix
 
int cls[6]={1,0,1,1,2,2};
     fee:	8c e0       	ldi	r24, 0x0C	; 12
     ff0:	e4 e7       	ldi	r30, 0x74	; 116
     ff2:	f3 e0       	ldi	r31, 0x03	; 3
     ff4:	de 01       	movw	r26, r28
     ff6:	11 96       	adiw	r26, 0x01	; 1
     ff8:	01 90       	ld	r0, Z+
     ffa:	0d 92       	st	X+, r0
     ffc:	8a 95       	dec	r24
     ffe:	e1 f7       	brne	.-8      	; 0xff8 <main+0x28>

  { s = 1;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <s+0x1>
    1008:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <s>
    for (l = 0; l < 1; l++)
    100c:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <l+0x1>
    1010:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <l>
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	90 e0       	ldi	r25, 0x00	; 0
    { 
       
      //Serial.print("\n\n\n Nut ");
      //Serial.print(l + 1);
      last = pick_var[l];
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	fc 01       	movw	r30, r24
    101e:	e4 5a       	subi	r30, 0xA4	; 164
    1020:	fc 4f       	sbci	r31, 0xFC	; 252
    1022:	40 81       	ld	r20, Z
    1024:	51 81       	ldd	r21, Z+1	; 0x01
    1026:	50 93 8f 03 	sts	0x038F, r21	; 0x80038f <last+0x1>
    102a:	40 93 8e 03 	sts	0x038E, r20	; 0x80038e <last>
      //Serial.print(" picked : ");
      dijkstra(n, s, pick_var[l]);
    102e:	60 91 8c 03 	lds	r22, 0x038C	; 0x80038c <s>
    1032:	70 91 8d 03 	lds	r23, 0x038D	; 0x80038d <s+0x1>
    1036:	8d e1       	ldi	r24, 0x1D	; 29
    1038:	90 e0       	ldi	r25, 0x00	; 0
      print(path, k);
      runs();
    103a:	75 dd       	rcall	.-1302   	; 0xb26 <_Z8dijkstraiii>
    103c:	d0 de       	rcall	.-608    	; 0xdde <_Z4runsv>
      colors(cls[l]);
    103e:	e0 91 8a 03 	lds	r30, 0x038A	; 0x80038a <l>
    1042:	f0 91 8b 03 	lds	r31, 0x038B	; 0x80038b <l+0x1>
    1046:	ee 0f       	add	r30, r30
    1048:	ff 1f       	adc	r31, r31
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	8c 0f       	add	r24, r28
    1050:	9d 1f       	adc	r25, r29
    1052:	e8 0f       	add	r30, r24
    1054:	f9 1f       	adc	r31, r25
    1056:	80 81       	ld	r24, Z
    1058:	91 81       	ldd	r25, Z+1	; 0x01
    105a:	46 df       	rcall	.-372    	; 0xee8 <_Z6colorsi>
      //returned red=1; blue=2; green=3;
      //before picking it will find the color of the nut
      //here bot will pick the nut


      last = drop1;
    105c:	40 91 82 03 	lds	r20, 0x0382	; 0x800382 <drop1>
    1060:	50 91 83 03 	lds	r21, 0x0383	; 0x800383 <drop1+0x1>
    1064:	50 93 8f 03 	sts	0x038F, r21	; 0x80038f <last+0x1>
    1068:	40 93 8e 03 	sts	0x038E, r20	; 0x80038e <last>
      //Serial.print("\n\n\n Dropped : ");
      dijkstra(n, pick_var[l], drop1);
    106c:	e0 91 8a 03 	lds	r30, 0x038A	; 0x80038a <l>
    1070:	f0 91 8b 03 	lds	r31, 0x038B	; 0x80038b <l+0x1>
    1074:	ee 0f       	add	r30, r30
    1076:	ff 1f       	adc	r31, r31
    1078:	e4 5a       	subi	r30, 0xA4	; 164
    107a:	fc 4f       	sbci	r31, 0xFC	; 252
    107c:	60 81       	ld	r22, Z
    107e:	71 81       	ldd	r23, Z+1	; 0x01
    1080:	8d e1       	ldi	r24, 0x1D	; 29
    1082:	90 e0       	ldi	r25, 0x00	; 0
      print(path, k);
      runs();
    1084:	50 dd       	rcall	.-1376   	; 0xb26 <_Z8dijkstraiii>
    1086:	ab de       	rcall	.-682    	; 0xdde <_Z4runsv>
  //printmat(edges,n);//print the new matrix
 
int cls[6]={1,0,1,1,2,2};

  { s = 1;
    for (l = 0; l < 1; l++)
    1088:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <l>
    108c:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <l+0x1>
    1090:	01 96       	adiw	r24, 0x01	; 1
    1092:	90 93 8b 03 	sts	0x038B, r25	; 0x80038b <l+0x1>
    1096:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <l>
    109a:	18 16       	cp	r1, r24
    109c:	19 06       	cpc	r1, r25
    109e:	0c f0       	brlt	.+2      	; 0x10a2 <main+0xd2>
    10a0:	bb cf       	rjmp	.-138    	; 0x1018 <main+0x48>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10a2:	9f ef       	ldi	r25, 0xFF	; 255
    10a4:	21 ee       	ldi	r18, 0xE1	; 225
    10a6:	84 e0       	ldi	r24, 0x04	; 4
    10a8:	91 50       	subi	r25, 0x01	; 1
    10aa:	20 40       	sbci	r18, 0x00	; 0
    10ac:	80 40       	sbci	r24, 0x00	; 0
    10ae:	e1 f7       	brne	.-8      	; 0x10a8 <main+0xd8>
    10b0:	00 c0       	rjmp	.+0      	; 0x10b2 <main+0xe2>
    10b2:	00 00       	nop
 //exit(1);
    //end of traversal ...beep the siren now beep();
  }
 return 0;

}
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	2c 96       	adiw	r28, 0x0c	; 12
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	08 95       	ret

000010ca <__subsf3>:
    10ca:	50 58       	subi	r21, 0x80	; 128

000010cc <__addsf3>:
    10cc:	bb 27       	eor	r27, r27
    10ce:	aa 27       	eor	r26, r26
    10d0:	0e d0       	rcall	.+28     	; 0x10ee <__addsf3x>
    10d2:	4d c1       	rjmp	.+666    	; 0x136e <__fp_round>
    10d4:	3e d1       	rcall	.+636    	; 0x1352 <__fp_pscA>
    10d6:	30 f0       	brcs	.+12     	; 0x10e4 <__addsf3+0x18>
    10d8:	43 d1       	rcall	.+646    	; 0x1360 <__fp_pscB>
    10da:	20 f0       	brcs	.+8      	; 0x10e4 <__addsf3+0x18>
    10dc:	31 f4       	brne	.+12     	; 0x10ea <__addsf3+0x1e>
    10de:	9f 3f       	cpi	r25, 0xFF	; 255
    10e0:	11 f4       	brne	.+4      	; 0x10e6 <__addsf3+0x1a>
    10e2:	1e f4       	brtc	.+6      	; 0x10ea <__addsf3+0x1e>
    10e4:	33 c1       	rjmp	.+614    	; 0x134c <__fp_nan>
    10e6:	0e f4       	brtc	.+2      	; 0x10ea <__addsf3+0x1e>
    10e8:	e0 95       	com	r30
    10ea:	e7 fb       	bst	r30, 7
    10ec:	29 c1       	rjmp	.+594    	; 0x1340 <__fp_inf>

000010ee <__addsf3x>:
    10ee:	e9 2f       	mov	r30, r25
    10f0:	4f d1       	rcall	.+670    	; 0x1390 <__fp_split3>
    10f2:	80 f3       	brcs	.-32     	; 0x10d4 <__addsf3+0x8>
    10f4:	ba 17       	cp	r27, r26
    10f6:	62 07       	cpc	r22, r18
    10f8:	73 07       	cpc	r23, r19
    10fa:	84 07       	cpc	r24, r20
    10fc:	95 07       	cpc	r25, r21
    10fe:	18 f0       	brcs	.+6      	; 0x1106 <__addsf3x+0x18>
    1100:	71 f4       	brne	.+28     	; 0x111e <__addsf3x+0x30>
    1102:	9e f5       	brtc	.+102    	; 0x116a <__addsf3x+0x7c>
    1104:	67 c1       	rjmp	.+718    	; 0x13d4 <__fp_zero>
    1106:	0e f4       	brtc	.+2      	; 0x110a <__addsf3x+0x1c>
    1108:	e0 95       	com	r30
    110a:	0b 2e       	mov	r0, r27
    110c:	ba 2f       	mov	r27, r26
    110e:	a0 2d       	mov	r26, r0
    1110:	0b 01       	movw	r0, r22
    1112:	b9 01       	movw	r22, r18
    1114:	90 01       	movw	r18, r0
    1116:	0c 01       	movw	r0, r24
    1118:	ca 01       	movw	r24, r20
    111a:	a0 01       	movw	r20, r0
    111c:	11 24       	eor	r1, r1
    111e:	ff 27       	eor	r31, r31
    1120:	59 1b       	sub	r21, r25
    1122:	99 f0       	breq	.+38     	; 0x114a <__addsf3x+0x5c>
    1124:	59 3f       	cpi	r21, 0xF9	; 249
    1126:	50 f4       	brcc	.+20     	; 0x113c <__addsf3x+0x4e>
    1128:	50 3e       	cpi	r21, 0xE0	; 224
    112a:	68 f1       	brcs	.+90     	; 0x1186 <__addsf3x+0x98>
    112c:	1a 16       	cp	r1, r26
    112e:	f0 40       	sbci	r31, 0x00	; 0
    1130:	a2 2f       	mov	r26, r18
    1132:	23 2f       	mov	r18, r19
    1134:	34 2f       	mov	r19, r20
    1136:	44 27       	eor	r20, r20
    1138:	58 5f       	subi	r21, 0xF8	; 248
    113a:	f3 cf       	rjmp	.-26     	; 0x1122 <__addsf3x+0x34>
    113c:	46 95       	lsr	r20
    113e:	37 95       	ror	r19
    1140:	27 95       	ror	r18
    1142:	a7 95       	ror	r26
    1144:	f0 40       	sbci	r31, 0x00	; 0
    1146:	53 95       	inc	r21
    1148:	c9 f7       	brne	.-14     	; 0x113c <__addsf3x+0x4e>
    114a:	7e f4       	brtc	.+30     	; 0x116a <__addsf3x+0x7c>
    114c:	1f 16       	cp	r1, r31
    114e:	ba 0b       	sbc	r27, r26
    1150:	62 0b       	sbc	r22, r18
    1152:	73 0b       	sbc	r23, r19
    1154:	84 0b       	sbc	r24, r20
    1156:	ba f0       	brmi	.+46     	; 0x1186 <__addsf3x+0x98>
    1158:	91 50       	subi	r25, 0x01	; 1
    115a:	a1 f0       	breq	.+40     	; 0x1184 <__addsf3x+0x96>
    115c:	ff 0f       	add	r31, r31
    115e:	bb 1f       	adc	r27, r27
    1160:	66 1f       	adc	r22, r22
    1162:	77 1f       	adc	r23, r23
    1164:	88 1f       	adc	r24, r24
    1166:	c2 f7       	brpl	.-16     	; 0x1158 <__addsf3x+0x6a>
    1168:	0e c0       	rjmp	.+28     	; 0x1186 <__addsf3x+0x98>
    116a:	ba 0f       	add	r27, r26
    116c:	62 1f       	adc	r22, r18
    116e:	73 1f       	adc	r23, r19
    1170:	84 1f       	adc	r24, r20
    1172:	48 f4       	brcc	.+18     	; 0x1186 <__addsf3x+0x98>
    1174:	87 95       	ror	r24
    1176:	77 95       	ror	r23
    1178:	67 95       	ror	r22
    117a:	b7 95       	ror	r27
    117c:	f7 95       	ror	r31
    117e:	9e 3f       	cpi	r25, 0xFE	; 254
    1180:	08 f0       	brcs	.+2      	; 0x1184 <__addsf3x+0x96>
    1182:	b3 cf       	rjmp	.-154    	; 0x10ea <__addsf3+0x1e>
    1184:	93 95       	inc	r25
    1186:	88 0f       	add	r24, r24
    1188:	08 f0       	brcs	.+2      	; 0x118c <__addsf3x+0x9e>
    118a:	99 27       	eor	r25, r25
    118c:	ee 0f       	add	r30, r30
    118e:	97 95       	ror	r25
    1190:	87 95       	ror	r24
    1192:	08 95       	ret

00001194 <__divsf3>:
    1194:	0c d0       	rcall	.+24     	; 0x11ae <__divsf3x>
    1196:	eb c0       	rjmp	.+470    	; 0x136e <__fp_round>
    1198:	e3 d0       	rcall	.+454    	; 0x1360 <__fp_pscB>
    119a:	40 f0       	brcs	.+16     	; 0x11ac <__divsf3+0x18>
    119c:	da d0       	rcall	.+436    	; 0x1352 <__fp_pscA>
    119e:	30 f0       	brcs	.+12     	; 0x11ac <__divsf3+0x18>
    11a0:	21 f4       	brne	.+8      	; 0x11aa <__divsf3+0x16>
    11a2:	5f 3f       	cpi	r21, 0xFF	; 255
    11a4:	19 f0       	breq	.+6      	; 0x11ac <__divsf3+0x18>
    11a6:	cc c0       	rjmp	.+408    	; 0x1340 <__fp_inf>
    11a8:	51 11       	cpse	r21, r1
    11aa:	15 c1       	rjmp	.+554    	; 0x13d6 <__fp_szero>
    11ac:	cf c0       	rjmp	.+414    	; 0x134c <__fp_nan>

000011ae <__divsf3x>:
    11ae:	f0 d0       	rcall	.+480    	; 0x1390 <__fp_split3>
    11b0:	98 f3       	brcs	.-26     	; 0x1198 <__divsf3+0x4>

000011b2 <__divsf3_pse>:
    11b2:	99 23       	and	r25, r25
    11b4:	c9 f3       	breq	.-14     	; 0x11a8 <__divsf3+0x14>
    11b6:	55 23       	and	r21, r21
    11b8:	b1 f3       	breq	.-20     	; 0x11a6 <__divsf3+0x12>
    11ba:	95 1b       	sub	r25, r21
    11bc:	55 0b       	sbc	r21, r21
    11be:	bb 27       	eor	r27, r27
    11c0:	aa 27       	eor	r26, r26
    11c2:	62 17       	cp	r22, r18
    11c4:	73 07       	cpc	r23, r19
    11c6:	84 07       	cpc	r24, r20
    11c8:	38 f0       	brcs	.+14     	; 0x11d8 <__divsf3_pse+0x26>
    11ca:	9f 5f       	subi	r25, 0xFF	; 255
    11cc:	5f 4f       	sbci	r21, 0xFF	; 255
    11ce:	22 0f       	add	r18, r18
    11d0:	33 1f       	adc	r19, r19
    11d2:	44 1f       	adc	r20, r20
    11d4:	aa 1f       	adc	r26, r26
    11d6:	a9 f3       	breq	.-22     	; 0x11c2 <__divsf3_pse+0x10>
    11d8:	33 d0       	rcall	.+102    	; 0x1240 <__divsf3_pse+0x8e>
    11da:	0e 2e       	mov	r0, r30
    11dc:	3a f0       	brmi	.+14     	; 0x11ec <__divsf3_pse+0x3a>
    11de:	e0 e8       	ldi	r30, 0x80	; 128
    11e0:	30 d0       	rcall	.+96     	; 0x1242 <__divsf3_pse+0x90>
    11e2:	91 50       	subi	r25, 0x01	; 1
    11e4:	50 40       	sbci	r21, 0x00	; 0
    11e6:	e6 95       	lsr	r30
    11e8:	00 1c       	adc	r0, r0
    11ea:	ca f7       	brpl	.-14     	; 0x11de <__divsf3_pse+0x2c>
    11ec:	29 d0       	rcall	.+82     	; 0x1240 <__divsf3_pse+0x8e>
    11ee:	fe 2f       	mov	r31, r30
    11f0:	27 d0       	rcall	.+78     	; 0x1240 <__divsf3_pse+0x8e>
    11f2:	66 0f       	add	r22, r22
    11f4:	77 1f       	adc	r23, r23
    11f6:	88 1f       	adc	r24, r24
    11f8:	bb 1f       	adc	r27, r27
    11fa:	26 17       	cp	r18, r22
    11fc:	37 07       	cpc	r19, r23
    11fe:	48 07       	cpc	r20, r24
    1200:	ab 07       	cpc	r26, r27
    1202:	b0 e8       	ldi	r27, 0x80	; 128
    1204:	09 f0       	breq	.+2      	; 0x1208 <__divsf3_pse+0x56>
    1206:	bb 0b       	sbc	r27, r27
    1208:	80 2d       	mov	r24, r0
    120a:	bf 01       	movw	r22, r30
    120c:	ff 27       	eor	r31, r31
    120e:	93 58       	subi	r25, 0x83	; 131
    1210:	5f 4f       	sbci	r21, 0xFF	; 255
    1212:	2a f0       	brmi	.+10     	; 0x121e <__divsf3_pse+0x6c>
    1214:	9e 3f       	cpi	r25, 0xFE	; 254
    1216:	51 05       	cpc	r21, r1
    1218:	68 f0       	brcs	.+26     	; 0x1234 <__divsf3_pse+0x82>
    121a:	92 c0       	rjmp	.+292    	; 0x1340 <__fp_inf>
    121c:	dc c0       	rjmp	.+440    	; 0x13d6 <__fp_szero>
    121e:	5f 3f       	cpi	r21, 0xFF	; 255
    1220:	ec f3       	brlt	.-6      	; 0x121c <__divsf3_pse+0x6a>
    1222:	98 3e       	cpi	r25, 0xE8	; 232
    1224:	dc f3       	brlt	.-10     	; 0x121c <__divsf3_pse+0x6a>
    1226:	86 95       	lsr	r24
    1228:	77 95       	ror	r23
    122a:	67 95       	ror	r22
    122c:	b7 95       	ror	r27
    122e:	f7 95       	ror	r31
    1230:	9f 5f       	subi	r25, 0xFF	; 255
    1232:	c9 f7       	brne	.-14     	; 0x1226 <__divsf3_pse+0x74>
    1234:	88 0f       	add	r24, r24
    1236:	91 1d       	adc	r25, r1
    1238:	96 95       	lsr	r25
    123a:	87 95       	ror	r24
    123c:	97 f9       	bld	r25, 7
    123e:	08 95       	ret
    1240:	e1 e0       	ldi	r30, 0x01	; 1
    1242:	66 0f       	add	r22, r22
    1244:	77 1f       	adc	r23, r23
    1246:	88 1f       	adc	r24, r24
    1248:	bb 1f       	adc	r27, r27
    124a:	62 17       	cp	r22, r18
    124c:	73 07       	cpc	r23, r19
    124e:	84 07       	cpc	r24, r20
    1250:	ba 07       	cpc	r27, r26
    1252:	20 f0       	brcs	.+8      	; 0x125c <__divsf3_pse+0xaa>
    1254:	62 1b       	sub	r22, r18
    1256:	73 0b       	sbc	r23, r19
    1258:	84 0b       	sbc	r24, r20
    125a:	ba 0b       	sbc	r27, r26
    125c:	ee 1f       	adc	r30, r30
    125e:	88 f7       	brcc	.-30     	; 0x1242 <__divsf3_pse+0x90>
    1260:	e0 95       	com	r30
    1262:	08 95       	ret

00001264 <__fixsfsi>:
    1264:	04 d0       	rcall	.+8      	; 0x126e <__fixunssfsi>
    1266:	68 94       	set
    1268:	b1 11       	cpse	r27, r1
    126a:	b5 c0       	rjmp	.+362    	; 0x13d6 <__fp_szero>
    126c:	08 95       	ret

0000126e <__fixunssfsi>:
    126e:	98 d0       	rcall	.+304    	; 0x13a0 <__fp_splitA>
    1270:	88 f0       	brcs	.+34     	; 0x1294 <__fixunssfsi+0x26>
    1272:	9f 57       	subi	r25, 0x7F	; 127
    1274:	90 f0       	brcs	.+36     	; 0x129a <__fixunssfsi+0x2c>
    1276:	b9 2f       	mov	r27, r25
    1278:	99 27       	eor	r25, r25
    127a:	b7 51       	subi	r27, 0x17	; 23
    127c:	a0 f0       	brcs	.+40     	; 0x12a6 <__fixunssfsi+0x38>
    127e:	d1 f0       	breq	.+52     	; 0x12b4 <__fixunssfsi+0x46>
    1280:	66 0f       	add	r22, r22
    1282:	77 1f       	adc	r23, r23
    1284:	88 1f       	adc	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	1a f0       	brmi	.+6      	; 0x1290 <__fixunssfsi+0x22>
    128a:	ba 95       	dec	r27
    128c:	c9 f7       	brne	.-14     	; 0x1280 <__fixunssfsi+0x12>
    128e:	12 c0       	rjmp	.+36     	; 0x12b4 <__fixunssfsi+0x46>
    1290:	b1 30       	cpi	r27, 0x01	; 1
    1292:	81 f0       	breq	.+32     	; 0x12b4 <__fixunssfsi+0x46>
    1294:	9f d0       	rcall	.+318    	; 0x13d4 <__fp_zero>
    1296:	b1 e0       	ldi	r27, 0x01	; 1
    1298:	08 95       	ret
    129a:	9c c0       	rjmp	.+312    	; 0x13d4 <__fp_zero>
    129c:	67 2f       	mov	r22, r23
    129e:	78 2f       	mov	r23, r24
    12a0:	88 27       	eor	r24, r24
    12a2:	b8 5f       	subi	r27, 0xF8	; 248
    12a4:	39 f0       	breq	.+14     	; 0x12b4 <__fixunssfsi+0x46>
    12a6:	b9 3f       	cpi	r27, 0xF9	; 249
    12a8:	cc f3       	brlt	.-14     	; 0x129c <__fixunssfsi+0x2e>
    12aa:	86 95       	lsr	r24
    12ac:	77 95       	ror	r23
    12ae:	67 95       	ror	r22
    12b0:	b3 95       	inc	r27
    12b2:	d9 f7       	brne	.-10     	; 0x12aa <__fixunssfsi+0x3c>
    12b4:	3e f4       	brtc	.+14     	; 0x12c4 <__fixunssfsi+0x56>
    12b6:	90 95       	com	r25
    12b8:	80 95       	com	r24
    12ba:	70 95       	com	r23
    12bc:	61 95       	neg	r22
    12be:	7f 4f       	sbci	r23, 0xFF	; 255
    12c0:	8f 4f       	sbci	r24, 0xFF	; 255
    12c2:	9f 4f       	sbci	r25, 0xFF	; 255
    12c4:	08 95       	ret

000012c6 <__floatunsisf>:
    12c6:	e8 94       	clt
    12c8:	09 c0       	rjmp	.+18     	; 0x12dc <__floatsisf+0x12>

000012ca <__floatsisf>:
    12ca:	97 fb       	bst	r25, 7
    12cc:	3e f4       	brtc	.+14     	; 0x12dc <__floatsisf+0x12>
    12ce:	90 95       	com	r25
    12d0:	80 95       	com	r24
    12d2:	70 95       	com	r23
    12d4:	61 95       	neg	r22
    12d6:	7f 4f       	sbci	r23, 0xFF	; 255
    12d8:	8f 4f       	sbci	r24, 0xFF	; 255
    12da:	9f 4f       	sbci	r25, 0xFF	; 255
    12dc:	99 23       	and	r25, r25
    12de:	a9 f0       	breq	.+42     	; 0x130a <__floatsisf+0x40>
    12e0:	f9 2f       	mov	r31, r25
    12e2:	96 e9       	ldi	r25, 0x96	; 150
    12e4:	bb 27       	eor	r27, r27
    12e6:	93 95       	inc	r25
    12e8:	f6 95       	lsr	r31
    12ea:	87 95       	ror	r24
    12ec:	77 95       	ror	r23
    12ee:	67 95       	ror	r22
    12f0:	b7 95       	ror	r27
    12f2:	f1 11       	cpse	r31, r1
    12f4:	f8 cf       	rjmp	.-16     	; 0x12e6 <__floatsisf+0x1c>
    12f6:	fa f4       	brpl	.+62     	; 0x1336 <__floatsisf+0x6c>
    12f8:	bb 0f       	add	r27, r27
    12fa:	11 f4       	brne	.+4      	; 0x1300 <__floatsisf+0x36>
    12fc:	60 ff       	sbrs	r22, 0
    12fe:	1b c0       	rjmp	.+54     	; 0x1336 <__floatsisf+0x6c>
    1300:	6f 5f       	subi	r22, 0xFF	; 255
    1302:	7f 4f       	sbci	r23, 0xFF	; 255
    1304:	8f 4f       	sbci	r24, 0xFF	; 255
    1306:	9f 4f       	sbci	r25, 0xFF	; 255
    1308:	16 c0       	rjmp	.+44     	; 0x1336 <__floatsisf+0x6c>
    130a:	88 23       	and	r24, r24
    130c:	11 f0       	breq	.+4      	; 0x1312 <__floatsisf+0x48>
    130e:	96 e9       	ldi	r25, 0x96	; 150
    1310:	11 c0       	rjmp	.+34     	; 0x1334 <__floatsisf+0x6a>
    1312:	77 23       	and	r23, r23
    1314:	21 f0       	breq	.+8      	; 0x131e <__floatsisf+0x54>
    1316:	9e e8       	ldi	r25, 0x8E	; 142
    1318:	87 2f       	mov	r24, r23
    131a:	76 2f       	mov	r23, r22
    131c:	05 c0       	rjmp	.+10     	; 0x1328 <__floatsisf+0x5e>
    131e:	66 23       	and	r22, r22
    1320:	71 f0       	breq	.+28     	; 0x133e <__floatsisf+0x74>
    1322:	96 e8       	ldi	r25, 0x86	; 134
    1324:	86 2f       	mov	r24, r22
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	60 e0       	ldi	r22, 0x00	; 0
    132a:	2a f0       	brmi	.+10     	; 0x1336 <__floatsisf+0x6c>
    132c:	9a 95       	dec	r25
    132e:	66 0f       	add	r22, r22
    1330:	77 1f       	adc	r23, r23
    1332:	88 1f       	adc	r24, r24
    1334:	da f7       	brpl	.-10     	; 0x132c <__floatsisf+0x62>
    1336:	88 0f       	add	r24, r24
    1338:	96 95       	lsr	r25
    133a:	87 95       	ror	r24
    133c:	97 f9       	bld	r25, 7
    133e:	08 95       	ret

00001340 <__fp_inf>:
    1340:	97 f9       	bld	r25, 7
    1342:	9f 67       	ori	r25, 0x7F	; 127
    1344:	80 e8       	ldi	r24, 0x80	; 128
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	08 95       	ret

0000134c <__fp_nan>:
    134c:	9f ef       	ldi	r25, 0xFF	; 255
    134e:	80 ec       	ldi	r24, 0xC0	; 192
    1350:	08 95       	ret

00001352 <__fp_pscA>:
    1352:	00 24       	eor	r0, r0
    1354:	0a 94       	dec	r0
    1356:	16 16       	cp	r1, r22
    1358:	17 06       	cpc	r1, r23
    135a:	18 06       	cpc	r1, r24
    135c:	09 06       	cpc	r0, r25
    135e:	08 95       	ret

00001360 <__fp_pscB>:
    1360:	00 24       	eor	r0, r0
    1362:	0a 94       	dec	r0
    1364:	12 16       	cp	r1, r18
    1366:	13 06       	cpc	r1, r19
    1368:	14 06       	cpc	r1, r20
    136a:	05 06       	cpc	r0, r21
    136c:	08 95       	ret

0000136e <__fp_round>:
    136e:	09 2e       	mov	r0, r25
    1370:	03 94       	inc	r0
    1372:	00 0c       	add	r0, r0
    1374:	11 f4       	brne	.+4      	; 0x137a <__fp_round+0xc>
    1376:	88 23       	and	r24, r24
    1378:	52 f0       	brmi	.+20     	; 0x138e <__fp_round+0x20>
    137a:	bb 0f       	add	r27, r27
    137c:	40 f4       	brcc	.+16     	; 0x138e <__fp_round+0x20>
    137e:	bf 2b       	or	r27, r31
    1380:	11 f4       	brne	.+4      	; 0x1386 <__fp_round+0x18>
    1382:	60 ff       	sbrs	r22, 0
    1384:	04 c0       	rjmp	.+8      	; 0x138e <__fp_round+0x20>
    1386:	6f 5f       	subi	r22, 0xFF	; 255
    1388:	7f 4f       	sbci	r23, 0xFF	; 255
    138a:	8f 4f       	sbci	r24, 0xFF	; 255
    138c:	9f 4f       	sbci	r25, 0xFF	; 255
    138e:	08 95       	ret

00001390 <__fp_split3>:
    1390:	57 fd       	sbrc	r21, 7
    1392:	90 58       	subi	r25, 0x80	; 128
    1394:	44 0f       	add	r20, r20
    1396:	55 1f       	adc	r21, r21
    1398:	59 f0       	breq	.+22     	; 0x13b0 <__fp_splitA+0x10>
    139a:	5f 3f       	cpi	r21, 0xFF	; 255
    139c:	71 f0       	breq	.+28     	; 0x13ba <__fp_splitA+0x1a>
    139e:	47 95       	ror	r20

000013a0 <__fp_splitA>:
    13a0:	88 0f       	add	r24, r24
    13a2:	97 fb       	bst	r25, 7
    13a4:	99 1f       	adc	r25, r25
    13a6:	61 f0       	breq	.+24     	; 0x13c0 <__fp_splitA+0x20>
    13a8:	9f 3f       	cpi	r25, 0xFF	; 255
    13aa:	79 f0       	breq	.+30     	; 0x13ca <__fp_splitA+0x2a>
    13ac:	87 95       	ror	r24
    13ae:	08 95       	ret
    13b0:	12 16       	cp	r1, r18
    13b2:	13 06       	cpc	r1, r19
    13b4:	14 06       	cpc	r1, r20
    13b6:	55 1f       	adc	r21, r21
    13b8:	f2 cf       	rjmp	.-28     	; 0x139e <__fp_split3+0xe>
    13ba:	46 95       	lsr	r20
    13bc:	f1 df       	rcall	.-30     	; 0x13a0 <__fp_splitA>
    13be:	08 c0       	rjmp	.+16     	; 0x13d0 <__fp_splitA+0x30>
    13c0:	16 16       	cp	r1, r22
    13c2:	17 06       	cpc	r1, r23
    13c4:	18 06       	cpc	r1, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	f1 cf       	rjmp	.-30     	; 0x13ac <__fp_splitA+0xc>
    13ca:	86 95       	lsr	r24
    13cc:	71 05       	cpc	r23, r1
    13ce:	61 05       	cpc	r22, r1
    13d0:	08 94       	sec
    13d2:	08 95       	ret

000013d4 <__fp_zero>:
    13d4:	e8 94       	clt

000013d6 <__fp_szero>:
    13d6:	bb 27       	eor	r27, r27
    13d8:	66 27       	eor	r22, r22
    13da:	77 27       	eor	r23, r23
    13dc:	cb 01       	movw	r24, r22
    13de:	97 f9       	bld	r25, 7
    13e0:	08 95       	ret

000013e2 <__mulsf3>:
    13e2:	0b d0       	rcall	.+22     	; 0x13fa <__mulsf3x>
    13e4:	c4 cf       	rjmp	.-120    	; 0x136e <__fp_round>
    13e6:	b5 df       	rcall	.-150    	; 0x1352 <__fp_pscA>
    13e8:	28 f0       	brcs	.+10     	; 0x13f4 <__mulsf3+0x12>
    13ea:	ba df       	rcall	.-140    	; 0x1360 <__fp_pscB>
    13ec:	18 f0       	brcs	.+6      	; 0x13f4 <__mulsf3+0x12>
    13ee:	95 23       	and	r25, r21
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <__mulsf3+0x12>
    13f2:	a6 cf       	rjmp	.-180    	; 0x1340 <__fp_inf>
    13f4:	ab cf       	rjmp	.-170    	; 0x134c <__fp_nan>
    13f6:	11 24       	eor	r1, r1
    13f8:	ee cf       	rjmp	.-36     	; 0x13d6 <__fp_szero>

000013fa <__mulsf3x>:
    13fa:	ca df       	rcall	.-108    	; 0x1390 <__fp_split3>
    13fc:	a0 f3       	brcs	.-24     	; 0x13e6 <__mulsf3+0x4>

000013fe <__mulsf3_pse>:
    13fe:	95 9f       	mul	r25, r21
    1400:	d1 f3       	breq	.-12     	; 0x13f6 <__mulsf3+0x14>
    1402:	95 0f       	add	r25, r21
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	55 1f       	adc	r21, r21
    1408:	62 9f       	mul	r22, r18
    140a:	f0 01       	movw	r30, r0
    140c:	72 9f       	mul	r23, r18
    140e:	bb 27       	eor	r27, r27
    1410:	f0 0d       	add	r31, r0
    1412:	b1 1d       	adc	r27, r1
    1414:	63 9f       	mul	r22, r19
    1416:	aa 27       	eor	r26, r26
    1418:	f0 0d       	add	r31, r0
    141a:	b1 1d       	adc	r27, r1
    141c:	aa 1f       	adc	r26, r26
    141e:	64 9f       	mul	r22, r20
    1420:	66 27       	eor	r22, r22
    1422:	b0 0d       	add	r27, r0
    1424:	a1 1d       	adc	r26, r1
    1426:	66 1f       	adc	r22, r22
    1428:	82 9f       	mul	r24, r18
    142a:	22 27       	eor	r18, r18
    142c:	b0 0d       	add	r27, r0
    142e:	a1 1d       	adc	r26, r1
    1430:	62 1f       	adc	r22, r18
    1432:	73 9f       	mul	r23, r19
    1434:	b0 0d       	add	r27, r0
    1436:	a1 1d       	adc	r26, r1
    1438:	62 1f       	adc	r22, r18
    143a:	83 9f       	mul	r24, r19
    143c:	a0 0d       	add	r26, r0
    143e:	61 1d       	adc	r22, r1
    1440:	22 1f       	adc	r18, r18
    1442:	74 9f       	mul	r23, r20
    1444:	33 27       	eor	r19, r19
    1446:	a0 0d       	add	r26, r0
    1448:	61 1d       	adc	r22, r1
    144a:	23 1f       	adc	r18, r19
    144c:	84 9f       	mul	r24, r20
    144e:	60 0d       	add	r22, r0
    1450:	21 1d       	adc	r18, r1
    1452:	82 2f       	mov	r24, r18
    1454:	76 2f       	mov	r23, r22
    1456:	6a 2f       	mov	r22, r26
    1458:	11 24       	eor	r1, r1
    145a:	9f 57       	subi	r25, 0x7F	; 127
    145c:	50 40       	sbci	r21, 0x00	; 0
    145e:	8a f0       	brmi	.+34     	; 0x1482 <__mulsf3_pse+0x84>
    1460:	e1 f0       	breq	.+56     	; 0x149a <__mulsf3_pse+0x9c>
    1462:	88 23       	and	r24, r24
    1464:	4a f0       	brmi	.+18     	; 0x1478 <__mulsf3_pse+0x7a>
    1466:	ee 0f       	add	r30, r30
    1468:	ff 1f       	adc	r31, r31
    146a:	bb 1f       	adc	r27, r27
    146c:	66 1f       	adc	r22, r22
    146e:	77 1f       	adc	r23, r23
    1470:	88 1f       	adc	r24, r24
    1472:	91 50       	subi	r25, 0x01	; 1
    1474:	50 40       	sbci	r21, 0x00	; 0
    1476:	a9 f7       	brne	.-22     	; 0x1462 <__mulsf3_pse+0x64>
    1478:	9e 3f       	cpi	r25, 0xFE	; 254
    147a:	51 05       	cpc	r21, r1
    147c:	70 f0       	brcs	.+28     	; 0x149a <__mulsf3_pse+0x9c>
    147e:	60 cf       	rjmp	.-320    	; 0x1340 <__fp_inf>
    1480:	aa cf       	rjmp	.-172    	; 0x13d6 <__fp_szero>
    1482:	5f 3f       	cpi	r21, 0xFF	; 255
    1484:	ec f3       	brlt	.-6      	; 0x1480 <__mulsf3_pse+0x82>
    1486:	98 3e       	cpi	r25, 0xE8	; 232
    1488:	dc f3       	brlt	.-10     	; 0x1480 <__mulsf3_pse+0x82>
    148a:	86 95       	lsr	r24
    148c:	77 95       	ror	r23
    148e:	67 95       	ror	r22
    1490:	b7 95       	ror	r27
    1492:	f7 95       	ror	r31
    1494:	e7 95       	ror	r30
    1496:	9f 5f       	subi	r25, 0xFF	; 255
    1498:	c1 f7       	brne	.-16     	; 0x148a <__mulsf3_pse+0x8c>
    149a:	fe 2b       	or	r31, r30
    149c:	88 0f       	add	r24, r24
    149e:	91 1d       	adc	r25, r1
    14a0:	96 95       	lsr	r25
    14a2:	87 95       	ror	r24
    14a4:	97 f9       	bld	r25, 7
    14a6:	08 95       	ret

000014a8 <pow>:
    14a8:	fa 01       	movw	r30, r20
    14aa:	ee 0f       	add	r30, r30
    14ac:	ff 1f       	adc	r31, r31
    14ae:	30 96       	adiw	r30, 0x00	; 0
    14b0:	21 05       	cpc	r18, r1
    14b2:	31 05       	cpc	r19, r1
    14b4:	99 f1       	breq	.+102    	; 0x151c <pow+0x74>
    14b6:	61 15       	cp	r22, r1
    14b8:	71 05       	cpc	r23, r1
    14ba:	61 f4       	brne	.+24     	; 0x14d4 <pow+0x2c>
    14bc:	80 38       	cpi	r24, 0x80	; 128
    14be:	bf e3       	ldi	r27, 0x3F	; 63
    14c0:	9b 07       	cpc	r25, r27
    14c2:	49 f1       	breq	.+82     	; 0x1516 <pow+0x6e>
    14c4:	68 94       	set
    14c6:	90 38       	cpi	r25, 0x80	; 128
    14c8:	81 05       	cpc	r24, r1
    14ca:	61 f0       	breq	.+24     	; 0x14e4 <pow+0x3c>
    14cc:	80 38       	cpi	r24, 0x80	; 128
    14ce:	bf ef       	ldi	r27, 0xFF	; 255
    14d0:	9b 07       	cpc	r25, r27
    14d2:	41 f0       	breq	.+16     	; 0x14e4 <pow+0x3c>
    14d4:	99 23       	and	r25, r25
    14d6:	42 f5       	brpl	.+80     	; 0x1528 <pow+0x80>
    14d8:	ff 3f       	cpi	r31, 0xFF	; 255
    14da:	e1 05       	cpc	r30, r1
    14dc:	31 05       	cpc	r19, r1
    14de:	21 05       	cpc	r18, r1
    14e0:	11 f1       	breq	.+68     	; 0x1526 <pow+0x7e>
    14e2:	e8 94       	clt
    14e4:	08 94       	sec
    14e6:	e7 95       	ror	r30
    14e8:	d9 01       	movw	r26, r18
    14ea:	aa 23       	and	r26, r26
    14ec:	29 f4       	brne	.+10     	; 0x14f8 <pow+0x50>
    14ee:	ab 2f       	mov	r26, r27
    14f0:	be 2f       	mov	r27, r30
    14f2:	f8 5f       	subi	r31, 0xF8	; 248
    14f4:	d0 f3       	brcs	.-12     	; 0x14ea <pow+0x42>
    14f6:	10 c0       	rjmp	.+32     	; 0x1518 <pow+0x70>
    14f8:	ff 5f       	subi	r31, 0xFF	; 255
    14fa:	70 f4       	brcc	.+28     	; 0x1518 <pow+0x70>
    14fc:	a6 95       	lsr	r26
    14fe:	e0 f7       	brcc	.-8      	; 0x14f8 <pow+0x50>
    1500:	f7 39       	cpi	r31, 0x97	; 151
    1502:	50 f0       	brcs	.+20     	; 0x1518 <pow+0x70>
    1504:	19 f0       	breq	.+6      	; 0x150c <pow+0x64>
    1506:	ff 3a       	cpi	r31, 0xAF	; 175
    1508:	38 f4       	brcc	.+14     	; 0x1518 <pow+0x70>
    150a:	9f 77       	andi	r25, 0x7F	; 127
    150c:	9f 93       	push	r25
    150e:	0c d0       	rcall	.+24     	; 0x1528 <pow+0x80>
    1510:	0f 90       	pop	r0
    1512:	07 fc       	sbrc	r0, 7
    1514:	90 58       	subi	r25, 0x80	; 128
    1516:	08 95       	ret
    1518:	3e f0       	brts	.+14     	; 0x1528 <pow+0x80>
    151a:	18 cf       	rjmp	.-464    	; 0x134c <__fp_nan>
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	70 e0       	ldi	r23, 0x00	; 0
    1520:	80 e8       	ldi	r24, 0x80	; 128
    1522:	9f e3       	ldi	r25, 0x3F	; 63
    1524:	08 95       	ret
    1526:	4f e7       	ldi	r20, 0x7F	; 127
    1528:	9f 77       	andi	r25, 0x7F	; 127
    152a:	5f 93       	push	r21
    152c:	4f 93       	push	r20
    152e:	3f 93       	push	r19
    1530:	2f 93       	push	r18
    1532:	9e d0       	rcall	.+316    	; 0x1670 <log>
    1534:	2f 91       	pop	r18
    1536:	3f 91       	pop	r19
    1538:	4f 91       	pop	r20
    153a:	5f 91       	pop	r21
    153c:	52 df       	rcall	.-348    	; 0x13e2 <__mulsf3>
    153e:	05 c0       	rjmp	.+10     	; 0x154a <exp>
    1540:	19 f4       	brne	.+6      	; 0x1548 <pow+0xa0>
    1542:	0e f0       	brts	.+2      	; 0x1546 <pow+0x9e>
    1544:	fd ce       	rjmp	.-518    	; 0x1340 <__fp_inf>
    1546:	46 cf       	rjmp	.-372    	; 0x13d4 <__fp_zero>
    1548:	01 cf       	rjmp	.-510    	; 0x134c <__fp_nan>

0000154a <exp>:
    154a:	2a df       	rcall	.-428    	; 0x13a0 <__fp_splitA>
    154c:	c8 f3       	brcs	.-14     	; 0x1540 <pow+0x98>
    154e:	96 38       	cpi	r25, 0x86	; 134
    1550:	c0 f7       	brcc	.-16     	; 0x1542 <pow+0x9a>
    1552:	07 f8       	bld	r0, 7
    1554:	0f 92       	push	r0
    1556:	e8 94       	clt
    1558:	2b e3       	ldi	r18, 0x3B	; 59
    155a:	3a ea       	ldi	r19, 0xAA	; 170
    155c:	48 eb       	ldi	r20, 0xB8	; 184
    155e:	5f e7       	ldi	r21, 0x7F	; 127
    1560:	4e df       	rcall	.-356    	; 0x13fe <__mulsf3_pse>
    1562:	0f 92       	push	r0
    1564:	0f 92       	push	r0
    1566:	0f 92       	push	r0
    1568:	4d b7       	in	r20, 0x3d	; 61
    156a:	5e b7       	in	r21, 0x3e	; 62
    156c:	0f 92       	push	r0
    156e:	c0 d0       	rcall	.+384    	; 0x16f0 <modf>
    1570:	e4 ee       	ldi	r30, 0xE4	; 228
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	16 d0       	rcall	.+44     	; 0x15a2 <__fp_powser>
    1576:	4f 91       	pop	r20
    1578:	5f 91       	pop	r21
    157a:	ef 91       	pop	r30
    157c:	ff 91       	pop	r31
    157e:	e5 95       	asr	r30
    1580:	ee 1f       	adc	r30, r30
    1582:	ff 1f       	adc	r31, r31
    1584:	49 f0       	breq	.+18     	; 0x1598 <exp+0x4e>
    1586:	fe 57       	subi	r31, 0x7E	; 126
    1588:	e0 68       	ori	r30, 0x80	; 128
    158a:	44 27       	eor	r20, r20
    158c:	ee 0f       	add	r30, r30
    158e:	44 1f       	adc	r20, r20
    1590:	fa 95       	dec	r31
    1592:	e1 f7       	brne	.-8      	; 0x158c <exp+0x42>
    1594:	41 95       	neg	r20
    1596:	55 0b       	sbc	r21, r21
    1598:	32 d0       	rcall	.+100    	; 0x15fe <ldexp>
    159a:	0f 90       	pop	r0
    159c:	07 fe       	sbrs	r0, 7
    159e:	26 c0       	rjmp	.+76     	; 0x15ec <inverse>
    15a0:	08 95       	ret

000015a2 <__fp_powser>:
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	1f 93       	push	r17
    15a8:	0f 93       	push	r16
    15aa:	ff 92       	push	r15
    15ac:	ef 92       	push	r14
    15ae:	df 92       	push	r13
    15b0:	7b 01       	movw	r14, r22
    15b2:	8c 01       	movw	r16, r24
    15b4:	68 94       	set
    15b6:	05 c0       	rjmp	.+10     	; 0x15c2 <__fp_powser+0x20>
    15b8:	da 2e       	mov	r13, r26
    15ba:	ef 01       	movw	r28, r30
    15bc:	1e df       	rcall	.-452    	; 0x13fa <__mulsf3x>
    15be:	fe 01       	movw	r30, r28
    15c0:	e8 94       	clt
    15c2:	a5 91       	lpm	r26, Z+
    15c4:	25 91       	lpm	r18, Z+
    15c6:	35 91       	lpm	r19, Z+
    15c8:	45 91       	lpm	r20, Z+
    15ca:	55 91       	lpm	r21, Z+
    15cc:	ae f3       	brts	.-22     	; 0x15b8 <__fp_powser+0x16>
    15ce:	ef 01       	movw	r28, r30
    15d0:	8e dd       	rcall	.-1252   	; 0x10ee <__addsf3x>
    15d2:	fe 01       	movw	r30, r28
    15d4:	97 01       	movw	r18, r14
    15d6:	a8 01       	movw	r20, r16
    15d8:	da 94       	dec	r13
    15da:	79 f7       	brne	.-34     	; 0x15ba <__fp_powser+0x18>
    15dc:	df 90       	pop	r13
    15de:	ef 90       	pop	r14
    15e0:	ff 90       	pop	r15
    15e2:	0f 91       	pop	r16
    15e4:	1f 91       	pop	r17
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	08 95       	ret

000015ec <inverse>:
    15ec:	9b 01       	movw	r18, r22
    15ee:	ac 01       	movw	r20, r24
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	70 e0       	ldi	r23, 0x00	; 0
    15f4:	80 e8       	ldi	r24, 0x80	; 128
    15f6:	9f e3       	ldi	r25, 0x3F	; 63
    15f8:	cd cd       	rjmp	.-1126   	; 0x1194 <__divsf3>
    15fa:	a2 ce       	rjmp	.-700    	; 0x1340 <__fp_inf>
    15fc:	ac c0       	rjmp	.+344    	; 0x1756 <__fp_mpack>

000015fe <ldexp>:
    15fe:	d0 de       	rcall	.-608    	; 0x13a0 <__fp_splitA>
    1600:	e8 f3       	brcs	.-6      	; 0x15fc <inverse+0x10>
    1602:	99 23       	and	r25, r25
    1604:	d9 f3       	breq	.-10     	; 0x15fc <inverse+0x10>
    1606:	94 0f       	add	r25, r20
    1608:	51 1d       	adc	r21, r1
    160a:	bb f3       	brvs	.-18     	; 0x15fa <inverse+0xe>
    160c:	91 50       	subi	r25, 0x01	; 1
    160e:	50 40       	sbci	r21, 0x00	; 0
    1610:	94 f0       	brlt	.+36     	; 0x1636 <ldexp+0x38>
    1612:	59 f0       	breq	.+22     	; 0x162a <ldexp+0x2c>
    1614:	88 23       	and	r24, r24
    1616:	32 f0       	brmi	.+12     	; 0x1624 <ldexp+0x26>
    1618:	66 0f       	add	r22, r22
    161a:	77 1f       	adc	r23, r23
    161c:	88 1f       	adc	r24, r24
    161e:	91 50       	subi	r25, 0x01	; 1
    1620:	50 40       	sbci	r21, 0x00	; 0
    1622:	c1 f7       	brne	.-16     	; 0x1614 <ldexp+0x16>
    1624:	9e 3f       	cpi	r25, 0xFE	; 254
    1626:	51 05       	cpc	r21, r1
    1628:	44 f7       	brge	.-48     	; 0x15fa <inverse+0xe>
    162a:	88 0f       	add	r24, r24
    162c:	91 1d       	adc	r25, r1
    162e:	96 95       	lsr	r25
    1630:	87 95       	ror	r24
    1632:	97 f9       	bld	r25, 7
    1634:	08 95       	ret
    1636:	5f 3f       	cpi	r21, 0xFF	; 255
    1638:	ac f0       	brlt	.+42     	; 0x1664 <ldexp+0x66>
    163a:	98 3e       	cpi	r25, 0xE8	; 232
    163c:	9c f0       	brlt	.+38     	; 0x1664 <ldexp+0x66>
    163e:	bb 27       	eor	r27, r27
    1640:	86 95       	lsr	r24
    1642:	77 95       	ror	r23
    1644:	67 95       	ror	r22
    1646:	b7 95       	ror	r27
    1648:	08 f4       	brcc	.+2      	; 0x164c <ldexp+0x4e>
    164a:	b1 60       	ori	r27, 0x01	; 1
    164c:	93 95       	inc	r25
    164e:	c1 f7       	brne	.-16     	; 0x1640 <ldexp+0x42>
    1650:	bb 0f       	add	r27, r27
    1652:	58 f7       	brcc	.-42     	; 0x162a <ldexp+0x2c>
    1654:	11 f4       	brne	.+4      	; 0x165a <ldexp+0x5c>
    1656:	60 ff       	sbrs	r22, 0
    1658:	e8 cf       	rjmp	.-48     	; 0x162a <ldexp+0x2c>
    165a:	6f 5f       	subi	r22, 0xFF	; 255
    165c:	7f 4f       	sbci	r23, 0xFF	; 255
    165e:	8f 4f       	sbci	r24, 0xFF	; 255
    1660:	9f 4f       	sbci	r25, 0xFF	; 255
    1662:	e3 cf       	rjmp	.-58     	; 0x162a <ldexp+0x2c>
    1664:	b8 ce       	rjmp	.-656    	; 0x13d6 <__fp_szero>
    1666:	0e f0       	brts	.+2      	; 0x166a <ldexp+0x6c>
    1668:	76 c0       	rjmp	.+236    	; 0x1756 <__fp_mpack>
    166a:	70 ce       	rjmp	.-800    	; 0x134c <__fp_nan>
    166c:	68 94       	set
    166e:	68 ce       	rjmp	.-816    	; 0x1340 <__fp_inf>

00001670 <log>:
    1670:	97 de       	rcall	.-722    	; 0x13a0 <__fp_splitA>
    1672:	c8 f3       	brcs	.-14     	; 0x1666 <ldexp+0x68>
    1674:	99 23       	and	r25, r25
    1676:	d1 f3       	breq	.-12     	; 0x166c <ldexp+0x6e>
    1678:	c6 f3       	brts	.-16     	; 0x166a <ldexp+0x6c>
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	1f 93       	push	r17
    1680:	0f 93       	push	r16
    1682:	ff 92       	push	r15
    1684:	c9 2f       	mov	r28, r25
    1686:	dd 27       	eor	r29, r29
    1688:	88 23       	and	r24, r24
    168a:	2a f0       	brmi	.+10     	; 0x1696 <log+0x26>
    168c:	21 97       	sbiw	r28, 0x01	; 1
    168e:	66 0f       	add	r22, r22
    1690:	77 1f       	adc	r23, r23
    1692:	88 1f       	adc	r24, r24
    1694:	da f7       	brpl	.-10     	; 0x168c <log+0x1c>
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e8       	ldi	r20, 0x80	; 128
    169c:	5f eb       	ldi	r21, 0xBF	; 191
    169e:	9f e3       	ldi	r25, 0x3F	; 63
    16a0:	88 39       	cpi	r24, 0x98	; 152
    16a2:	20 f0       	brcs	.+8      	; 0x16ac <log+0x3c>
    16a4:	80 3e       	cpi	r24, 0xE0	; 224
    16a6:	30 f0       	brcs	.+12     	; 0x16b4 <log+0x44>
    16a8:	21 96       	adiw	r28, 0x01	; 1
    16aa:	8f 77       	andi	r24, 0x7F	; 127
    16ac:	0f dd       	rcall	.-1506   	; 0x10cc <__addsf3>
    16ae:	ec e0       	ldi	r30, 0x0C	; 12
    16b0:	f1 e0       	ldi	r31, 0x01	; 1
    16b2:	03 c0       	rjmp	.+6      	; 0x16ba <log+0x4a>
    16b4:	0b dd       	rcall	.-1514   	; 0x10cc <__addsf3>
    16b6:	e9 e3       	ldi	r30, 0x39	; 57
    16b8:	f1 e0       	ldi	r31, 0x01	; 1
    16ba:	73 df       	rcall	.-282    	; 0x15a2 <__fp_powser>
    16bc:	8b 01       	movw	r16, r22
    16be:	be 01       	movw	r22, r28
    16c0:	ec 01       	movw	r28, r24
    16c2:	fb 2e       	mov	r15, r27
    16c4:	6f 57       	subi	r22, 0x7F	; 127
    16c6:	71 09       	sbc	r23, r1
    16c8:	75 95       	asr	r23
    16ca:	77 1f       	adc	r23, r23
    16cc:	88 0b       	sbc	r24, r24
    16ce:	99 0b       	sbc	r25, r25
    16d0:	fc dd       	rcall	.-1032   	; 0x12ca <__floatsisf>
    16d2:	28 e1       	ldi	r18, 0x18	; 24
    16d4:	32 e7       	ldi	r19, 0x72	; 114
    16d6:	41 e3       	ldi	r20, 0x31	; 49
    16d8:	5f e3       	ldi	r21, 0x3F	; 63
    16da:	8f de       	rcall	.-738    	; 0x13fa <__mulsf3x>
    16dc:	af 2d       	mov	r26, r15
    16de:	98 01       	movw	r18, r16
    16e0:	ae 01       	movw	r20, r28
    16e2:	ff 90       	pop	r15
    16e4:	0f 91       	pop	r16
    16e6:	1f 91       	pop	r17
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	00 dd       	rcall	.-1536   	; 0x10ee <__addsf3x>
    16ee:	3f ce       	rjmp	.-898    	; 0x136e <__fp_round>

000016f0 <modf>:
    16f0:	fa 01       	movw	r30, r20
    16f2:	dc 01       	movw	r26, r24
    16f4:	aa 0f       	add	r26, r26
    16f6:	bb 1f       	adc	r27, r27
    16f8:	9b 01       	movw	r18, r22
    16fa:	ac 01       	movw	r20, r24
    16fc:	bf 57       	subi	r27, 0x7F	; 127
    16fe:	28 f4       	brcc	.+10     	; 0x170a <modf+0x1a>
    1700:	22 27       	eor	r18, r18
    1702:	33 27       	eor	r19, r19
    1704:	44 27       	eor	r20, r20
    1706:	50 78       	andi	r21, 0x80	; 128
    1708:	1f c0       	rjmp	.+62     	; 0x1748 <modf+0x58>
    170a:	b7 51       	subi	r27, 0x17	; 23
    170c:	88 f4       	brcc	.+34     	; 0x1730 <modf+0x40>
    170e:	ab 2f       	mov	r26, r27
    1710:	00 24       	eor	r0, r0
    1712:	46 95       	lsr	r20
    1714:	37 95       	ror	r19
    1716:	27 95       	ror	r18
    1718:	01 1c       	adc	r0, r1
    171a:	a3 95       	inc	r26
    171c:	d2 f3       	brmi	.-12     	; 0x1712 <modf+0x22>
    171e:	00 20       	and	r0, r0
    1720:	69 f0       	breq	.+26     	; 0x173c <modf+0x4c>
    1722:	22 0f       	add	r18, r18
    1724:	33 1f       	adc	r19, r19
    1726:	44 1f       	adc	r20, r20
    1728:	b3 95       	inc	r27
    172a:	da f3       	brmi	.-10     	; 0x1722 <modf+0x32>
    172c:	0d d0       	rcall	.+26     	; 0x1748 <modf+0x58>
    172e:	cd cc       	rjmp	.-1638   	; 0x10ca <__subsf3>
    1730:	61 30       	cpi	r22, 0x01	; 1
    1732:	71 05       	cpc	r23, r1
    1734:	a0 e8       	ldi	r26, 0x80	; 128
    1736:	8a 07       	cpc	r24, r26
    1738:	b9 46       	sbci	r27, 0x69	; 105
    173a:	30 f4       	brcc	.+12     	; 0x1748 <modf+0x58>
    173c:	9b 01       	movw	r18, r22
    173e:	ac 01       	movw	r20, r24
    1740:	66 27       	eor	r22, r22
    1742:	77 27       	eor	r23, r23
    1744:	88 27       	eor	r24, r24
    1746:	90 78       	andi	r25, 0x80	; 128
    1748:	30 96       	adiw	r30, 0x00	; 0
    174a:	21 f0       	breq	.+8      	; 0x1754 <modf+0x64>
    174c:	20 83       	st	Z, r18
    174e:	31 83       	std	Z+1, r19	; 0x01
    1750:	42 83       	std	Z+2, r20	; 0x02
    1752:	53 83       	std	Z+3, r21	; 0x03
    1754:	08 95       	ret

00001756 <__fp_mpack>:
    1756:	9f 3f       	cpi	r25, 0xFF	; 255
    1758:	31 f0       	breq	.+12     	; 0x1766 <__fp_mpack_finite+0xc>

0000175a <__fp_mpack_finite>:
    175a:	91 50       	subi	r25, 0x01	; 1
    175c:	20 f4       	brcc	.+8      	; 0x1766 <__fp_mpack_finite+0xc>
    175e:	87 95       	ror	r24
    1760:	77 95       	ror	r23
    1762:	67 95       	ror	r22
    1764:	b7 95       	ror	r27
    1766:	88 0f       	add	r24, r24
    1768:	91 1d       	adc	r25, r1
    176a:	96 95       	lsr	r25
    176c:	87 95       	ror	r24
    176e:	97 f9       	bld	r25, 7
    1770:	08 95       	ret

00001772 <_exit>:
    1772:	f8 94       	cli

00001774 <__stop_program>:
    1774:	ff cf       	rjmp	.-2      	; 0x1774 <__stop_program>
